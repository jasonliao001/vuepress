(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{262:function(v,_,t){"use strict";t.r(_);var r=t(28),e=Object(r.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")]),v._v(" "),t("blockquote",[t("p",[v._v("设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。")])]),v._v(" "),t("h2",{attrs:{id:"设计模式的类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的类型"}},[v._v("#")]),v._v(" 设计模式的类型")]),v._v(" "),t("p",[v._v("共有 23 种设计模式。这些模式可以分为三大类：")]),v._v(" "),t("p",[t("strong",[v._v("创建型模式（Creational Patterns）- 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。")])]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter1",target:"_blank",rel:"noopener noreferrer"}},[v._v("工厂模式（Factory Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter1",target:"_blank",rel:"noopener noreferrer"}},[v._v("抽象工厂模式（Abstract Factory Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter2",target:"_blank",rel:"noopener noreferrer"}},[v._v("单例模式（Singleton Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter3",target:"_blank",rel:"noopener noreferrer"}},[v._v("建造者模式（Builder Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter4",target:"_blank",rel:"noopener noreferrer"}},[v._v("原型模式（Prototype Pattern）"),t("OutboundLink")],1)])]),v._v(" "),t("p",[t("strong",[v._v("结构型模式（Structural Patterns）- 这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。")])]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter5",target:"_blank",rel:"noopener noreferrer"}},[v._v("适配器模式（Adapter Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter6",target:"_blank",rel:"noopener noreferrer"}},[v._v("桥接模式（Bridge Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter7",target:"_blank",rel:"noopener noreferrer"}},[v._v("组合模式（Composite Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chpater8",target:"_blank",rel:"noopener noreferrer"}},[v._v("装饰器模式（Decorator Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chpater9",target:"_blank",rel:"noopener noreferrer"}},[v._v("外观模式（Facade Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter10",target:"_blank",rel:"noopener noreferrer"}},[v._v("享元模式（Flyweight Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter11",target:"_blank",rel:"noopener noreferrer"}},[v._v("代理模式（Proxy Pattern)"),t("OutboundLink")],1)])]),v._v(" "),t("p",[t("strong",[v._v("行为型模式（Behavioral Patterns）- 这些设计模式特别关注对象之间的通信。")])]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter12",target:"_blank",rel:"noopener noreferrer"}},[v._v("责任链模式（Chain of Responsibility Pattern)"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter13",target:"_blank",rel:"noopener noreferrer"}},[v._v("命令模式（Command Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter14",target:"_blank",rel:"noopener noreferrer"}},[v._v("解释器模式（Interpreter Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter15",target:"_blank",rel:"noopener noreferrer"}},[v._v("迭代器模式（Iterator Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter16",target:"_blank",rel:"noopener noreferrer"}},[v._v("中介者模式（Mediator Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter17",target:"_blank",rel:"noopener noreferrer"}},[v._v("备忘录模式（Memento Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter18",target:"_blank",rel:"noopener noreferrer"}},[v._v("观察者模式（Observer Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter19",target:"_blank",rel:"noopener noreferrer"}},[v._v("状态模式（State Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter20",target:"_blank",rel:"noopener noreferrer"}},[v._v("策略模式（Strategy Pattern）"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter21",target:"_blank",rel:"noopener noreferrer"}},[v._v("模板模式（Template Pattern）"),t("OutboundLink")],1)])]),v._v(" "),t("p",[t("strong",[v._v("技巧型设计模式")])]),v._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter22",target:"_blank",rel:"noopener noreferrer"}},[v._v("MVC模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter23",target:"_blank",rel:"noopener noreferrer"}},[v._v("MVP模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter24",target:"_blank",rel:"noopener noreferrer"}},[v._v("MVVM模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter25",target:"_blank",rel:"noopener noreferrer"}},[v._v("链模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter26",target:"_blank",rel:"noopener noreferrer"}},[v._v("委托模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter27",target:"_blank",rel:"noopener noreferrer"}},[v._v("数据访问对象模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter28",target:"_blank",rel:"noopener noreferrer"}},[v._v("简单模板模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter29",target:"_blank",rel:"noopener noreferrer"}},[v._v("参与者模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter30",target:"_blank",rel:"noopener noreferrer"}},[v._v("等待者模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter31",target:"_blank",rel:"noopener noreferrer"}},[v._v("同步模块模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter32",target:"_blank",rel:"noopener noreferrer"}},[v._v("异步模块模式"),t("OutboundLink")],1)]),v._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/jasonliao001/learn-javascript-design-pattern/tree/master/chapter33",target:"_blank",rel:"noopener noreferrer"}},[v._v("Widget模式"),t("OutboundLink")],1)])]),v._v(" "),t("h2",{attrs:{id:"设计模式的六大原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的六大原则"}},[v._v("#")]),v._v(" 设计模式的六大原则")]),v._v(" "),t("h3",{attrs:{id:"_1、开闭原则（open-close-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、开闭原则（open-close-principle）"}},[v._v("#")]),v._v(" 1、开闭原则（Open Close Principle）")]),v._v(" "),t("p",[v._v("开闭原则的意思是："),t("strong",[v._v("对扩展开放，对修改关闭")]),v._v("。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。")]),v._v(" "),t("h3",{attrs:{id:"_2、里氏代换原则（liskov-substitution-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、里氏代换原则（liskov-substitution-principle）"}},[v._v("#")]),v._v(" 2、里氏代换原则（Liskov Substitution Principle）")]),v._v(" "),t("p",[v._v("里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。")]),v._v(" "),t("h3",{attrs:{id:"_3、依赖倒转原则（dependence-inversion-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、依赖倒转原则（dependence-inversion-principle）"}},[v._v("#")]),v._v(" 3、依赖倒转原则（Dependence Inversion Principle）")]),v._v(" "),t("p",[v._v("这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。")]),v._v(" "),t("h3",{attrs:{id:"_4、接口隔离原则（interface-segregation-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、接口隔离原则（interface-segregation-principle）"}},[v._v("#")]),v._v(" 4、接口隔离原则（Interface Segregation Principle）")]),v._v(" "),t("p",[v._v("这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。")]),v._v(" "),t("h3",{attrs:{id:"_5、迪米特法则，又称最少知道原则（demeter-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、迪米特法则，又称最少知道原则（demeter-principle）"}},[v._v("#")]),v._v(" 5、迪米特法则，又称最少知道原则（Demeter Principle）")]),v._v(" "),t("p",[v._v("最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。")]),v._v(" "),t("h3",{attrs:{id:"_6、合成复用原则（composite-reuse-principle）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、合成复用原则（composite-reuse-principle）"}},[v._v("#")]),v._v(" 6、合成复用原则（Composite Reuse Principle）")]),v._v(" "),t("p",[v._v("合成复用原则是指：尽量使用合成 / 聚合的方式，而不是使用继承。")]),v._v(" "),t("h2",{attrs:{id:"工厂模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[v._v("#")]),v._v(" 工厂模式")]),v._v(" "),t("blockquote",[t("p",[v._v("工厂模式（Factory Pattern）最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。")])]),v._v(" "),t("h3",{attrs:{id:"介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 主要解决接口选择的问题。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 我们明确地计划不同条件下创建不同实例时。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 让其子类实现工厂接口，返回的也是一个抽象的产品。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 创建过程在其子类执行。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("您需要一辆汽车，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("一个调用者想创建一个对象，只要知道其名称就可以了。")]),v._v(" "),t("li",[v._v("扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。")]),v._v(" "),t("li",[v._v("屏蔽产品的具体实现，调用者只关心产品的接口。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("权限管理中的路由授权")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度")]),v._v(" "),t("h2",{attrs:{id:"单例模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[v._v("#")]),v._v(" 单例模式")]),v._v(" "),t("blockquote",[t("p",[v._v("这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-2"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 保证一个类仅有一个实例，并提供一个访问它的全局访问点。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 一个全局使用的类频繁地创建与销毁。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 当您想控制实例数目，节省系统资源的时候。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 构造函数是私有的。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("一个班级只有一个班主任。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。")]),v._v(" "),t("li",[v._v("避免对资源的多重占用（比如写文件操作）。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("确保只有一个实例， 并提供全局访问，比如loadshe库的使用")]),v._v(" "),t("li",[v._v("组件中的message，modal")])]),v._v(" "),t("h2",{attrs:{id:"建造者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#建造者模式"}},[v._v("#")]),v._v(" 建造者模式")]),v._v(" "),t("blockquote",[t("p",[v._v("建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的保证一个类仅有一个实例，并提供一个访问它的全局访问点")])]),v._v(" "),t("h3",{attrs:{id:"介绍-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-3"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(' 主要解决在软件系统中，有时候面临着 "一个复杂对象" 的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。')]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 一些基本部件不会变，而其组合经常变化的时候。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 将变与不变分离开。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v('去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的 "套餐"。')])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("建造者独立，易扩展。")]),v._v(" "),t("li",[v._v("便于控制细节风险。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("产品必须有共同点，范围有限制。")]),v._v(" "),t("li",[v._v("如内部变化复杂，会有很多的建造类。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("需要生成的对象具有复杂的内部结构。")]),v._v(" "),t("li",[v._v("需要生成的对象内部属性本身相互依赖。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 与工厂模式的区别是：建造者模式更加关注与零件装配的顺序")]),v._v(" "),t("h2",{attrs:{id:"原型模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[v._v("#")]),v._v(" 原型模式")]),v._v(" "),t("blockquote",[t("p",[v._v("原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-4"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 在运行期建立和删除原型。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")])]),v._v(" "),t("ol",[t("li",[v._v("当一个系统应该独立于它的产品创建，构成和表示时。")]),v._v(" "),t("li",[v._v("当要实例化的类是在运行时刻指定时，例如，通过动态装载。")]),v._v(" "),t("li",[v._v("为了避免创建一个与产品类层次平行的工厂类层次时。")]),v._v(" "),t("li",[v._v("当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。")])]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 利用已有的一个原型对象，快速地生成和原型对象一样的实例。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")])]),v._v(" "),t("ol",[t("li",[v._v('原型模式同样用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它同样要求这些 "易变类" 拥有稳定的接口。')])]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("..")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("性能提高。")]),v._v(" "),t("li",[v._v("逃避构造函数的约束。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li")]),v._v(" "),t("h2",{attrs:{id:"适配器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[v._v("#")]),v._v(" 适配器模式")]),v._v(" "),t("blockquote",[t("p",[v._v("适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。\n这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-5"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(' 主要解决在软件系统中，常常要将一些 "现存的对象" 放到新的环境中，而新环境要求的接口是现对象不能满足的。')]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")])]),v._v(" "),t("ol",[t("li",[v._v("系统需要使用现有的类，而此类的接口不符合系统的需要。")]),v._v(" "),t("li",[v._v("想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。")]),v._v(" "),t("li",[v._v("通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）")])]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 继承或依赖（推荐）。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 适配器继承或依赖已有的对象，实现想要的目标接口。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。")]),v._v(" "),t("li",[v._v("JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。")]),v._v(" "),t("li",[v._v("在 LINUX 上运行 WINDOWS 程序。 4. JAVA 中的 jdbc。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("可以让任何两个没有关联的类一起运行。")]),v._v(" "),t("li",[v._v("提高了类的复用。")]),v._v(" "),t("li",[v._v("增加了类的透明度。")]),v._v(" "),t("li",[v._v("灵活性好。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。")]),v._v(" "),t("li",[v._v("由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")]),v._v(" 有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式")]),v._v(" "),t("h2",{attrs:{id:"桥接模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[v._v("#")]),v._v(" 桥接模式")]),v._v(" "),t("blockquote",[t("p",[v._v("桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。\n这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-6"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 将抽象部分与实现部分分离，使它们都可以独立的变化。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 实现系统可能有多个角度分类，每一种角度都可能变化。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 抽象类依赖实现类。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("抽象和实现的分离。")]),v._v(" "),t("li",[v._v("优秀的扩展能力。")]),v._v(" "),t("li",[v._v("实现细节对客户透明。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。")]),v._v(" "),t("li",[v._v("对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。")]),v._v(" "),t("li",[v._v("一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 对于两个独立变化的维度，使用桥接模式再适合不过了。")]),v._v(" "),t("h2",{attrs:{id:"组合模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[v._v("#")]),v._v(" 组合模式")]),v._v(" "),t("blockquote",[t("p",[v._v("组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。\n这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-7"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(' 将对象组合成树形结构以表示 "部分 - 整体" 的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。')]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")])]),v._v(" "),t("ol",[t("li",[v._v("您想表示对象的部分 - 整体层次结构（树形结构）。")]),v._v(" "),t("li",[v._v("您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。")])]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 树枝和叶子实现统一接口，树枝内部组合该接口。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 树枝内部组合该接口，并且含有内部属性 List，里面放 Component。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("算术表达式包括操作数. 操作符和另一个操作数，其中，另一个操作符也可以是操作数. 操作符和另一个操作数。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("高层模块调用简单。")]),v._v(" "),t("li",[v._v("节点自由增加。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")]),v._v(" 部分. 整体场景，如树形菜单，文件. 文件夹的管理。")]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 定义时为具体类。")]),v._v(" "),t("h2",{attrs:{id:"装饰器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[v._v("#")]),v._v(" 装饰器模式")]),v._v(" "),t("blockquote",[t("p",[v._v("装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。\n这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-8"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 在不想增加很多子类的情况下扩展类。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 将具体功能职责划分，同时继承装饰者模式。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")])]),v._v(" "),t("ol",[t("li",[v._v("Component 类充当抽象角色，不应该具体实现。")]),v._v(" "),t("li",[v._v("修饰类引用和继承 Component 类，具体扩展类重写父类方法。")])]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v('孙悟空有 72 变，当他变成 "庙宇" 后，他的根本还是一只猴子，但是他又有了庙宇的功能。')]),v._v(" "),t("li",[v._v("不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")]),v._v(" 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。")]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 多层装饰比较复杂。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("扩展一个类的功能。")]),v._v(" "),t("li",[v._v("动态增加功能，动态撤销。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 可代替继承。")]),v._v(" "),t("h2",{attrs:{id:"外观模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[v._v("#")]),v._v(" 外观模式")]),v._v(" "),t("blockquote",[t("p",[v._v("外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。\n这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-9"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")])]),v._v(" "),t("ol",[t("li",[v._v('客户端不需要知道系统内部的复杂联系，整个系统只需提供一个 "接待员" 即可。')]),v._v(" "),t("li",[v._v("定义系统的入口。")])]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 客户端不与系统耦合，外观类与系统耦合。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 在客户端和复杂系统之间再加一层，这一层将调用顺序. 依赖关系等处理好。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("减少系统相互依赖。")]),v._v(" "),t("li",[v._v("提高灵活性。")]),v._v(" "),t("li",[v._v("提高了安全性。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("为复杂的模块或子系统提供外界访问的模块。")]),v._v(" "),t("li",[v._v("子系统相对独立。")]),v._v(" "),t("li",[v._v("预防低水平人员带来的风险。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 在层次化结构中，可以使用外观模式定义系统中每一层的入口。")]),v._v(" "),t("h2",{attrs:{id:"享元模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[v._v("#")]),v._v(" 享元模式")]),v._v(" "),t("blockquote",[t("p",[v._v("享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。\n享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。我们将通过创建 5 个对象来画出 20 个分布于不同位置的圆来演示这种模式。由于只有 5 种可用的颜色，所以 color 属性被用来检查现有的 "),t("em",[v._v("Circle")]),v._v(" 对象。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-10"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 运用共享技术有效地支持大量细粒度的对象。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")])]),v._v(" "),t("ol",[t("li",[v._v("系统中有大量对象。")]),v._v(" "),t("li",[v._v("这些对象消耗大量内存。")]),v._v(" "),t("li",[v._v("这些对象的状态大部分可以外部化。")]),v._v(" "),t("li",[v._v("这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。")]),v._v(" "),t("li",[v._v("系统不依赖于这些对象身份，这些对象是不可分辨的。")])]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 用 HashMap 存储这些对象。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("数据库的数据池。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")]),v._v(" 大大减少对象的创建，降低系统的内存，使效率提高。")]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("系统有大量相似对象。")]),v._v(" "),t("li",[v._v("需要缓冲池的场景。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")])]),v._v(" "),t("ol",[t("li",[v._v("注意划分外部状态和内部状态，否则可能会引起线程安全问题。")]),v._v(" "),t("li",[v._v("这些类必须有一个工厂对象加以控制。")])]),v._v(" "),t("h2",{attrs:{id:"代理模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[v._v("#")]),v._v(" 代理模式")]),v._v(" "),t("blockquote",[t("p",[v._v("在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。\n在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-11"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 为其他对象提供一种代理以控制对这个对象的访问。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 想在访问一个类时做一些控制。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 增加中间层。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 实现与被代理类组合。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("Windows 里面的快捷方式。")]),v._v(" "),t("li",[v._v("买火车票不一定在火车站买，也可以去代售点。")]),v._v(" "),t("li",[v._v("一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("职责清晰。")]),v._v(" "),t("li",[v._v("高扩展性。")]),v._v(" "),t("li",[v._v("智能化。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。")]),v._v(" "),t("li",[v._v("实现代理模式需要额外的工作，有些代理模式的实现非常复杂。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")]),v._v(" 按职责来划分，通常有以下使用场景：")]),v._v(" "),t("ol",[t("li",[v._v("远程代理。")]),v._v(" "),t("li",[v._v("虚拟代理。")]),v._v(" "),t("li",[v._v("Copy-on-Write 代理。")]),v._v(" "),t("li",[v._v("保护（Protect or Access）代理。")]),v._v(" "),t("li",[v._v("Cache 代理。")]),v._v(" "),t("li",[v._v("防火墙（Firewall）代理。")]),v._v(" "),t("li",[v._v("同步化（Synchronization）代理。")]),v._v(" "),t("li",[v._v("智能引用（Smart Reference）代理。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")])]),v._v(" "),t("ol",[t("li",[v._v("和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。")]),v._v(" "),t("li",[v._v("和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。")])]),v._v(" "),t("h2",{attrs:{id:"责任链模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#责任链模式"}},[v._v("#")]),v._v(" 责任链模式")]),v._v(" "),t("blockquote",[t("p",[v._v("顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。\n在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-12"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 在处理消息的时候以过滤很多道。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 拦截的类都实现统一接口。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v('红楼梦中的 "击鼓传花"。')]),v._v(" "),t("li",[v._v("JS 中的事件冒泡。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("降低耦合度。它将请求的发送者和接收者解耦。")]),v._v(" "),t("li",[v._v("简化了对象。使得对象不需要知道链的结构。")]),v._v(" "),t("li",[v._v("增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。")]),v._v(" "),t("li",[v._v("增加新的请求处理类很方便。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("不能保证请求一定被接收。")]),v._v(" "),t("li",[v._v("系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。")]),v._v(" "),t("li",[v._v("可能不容易观察运行时的特征，有碍于除错。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。")]),v._v(" "),t("li",[v._v("在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。")]),v._v(" "),t("li",[v._v("可动态指定一组对象处理请求。")])]),v._v(" "),t("h2",{attrs:{id:"命令模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[v._v("#")]),v._v(" 命令模式")]),v._v(" "),t("blockquote",[t("p",[v._v("命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-13"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(' 在某些场合，比如要对行为进行 "记录、撤销 / 重做、事务" 等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将 "行为请求者" 与 "行为实现者" 解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。')]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 定义三个角色：")]),v._v(" "),t("ol",[t("li",[v._v("received 真正的命令执行对象")]),v._v(" "),t("li",[v._v("Command")]),v._v(" "),t("li",[v._v("invoker 使用命令对象的入口")])]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")]),v._v(" struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。")]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("降低了系统耦合度。")]),v._v(" "),t("li",[v._v("新的命令可以很容易添加到系统中去。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 使用命令模式可能会导致某些系统有过多的具体命令类。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")]),v._v(" 认为是命令的地方都可以使用命令模式，比如：")]),v._v(" "),t("ol",[t("li",[v._v("GUI 中每一个按钮都是一条命令。")]),v._v(" "),t("li",[v._v("模拟 CMD。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 系统需要支持命令的撤销 (Undo) 操作和恢复 (Redo) 操作，也可以考虑使用命令模式，见命令模式的扩展。")]),v._v(" "),t("h2",{attrs:{id:"解释器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式"}},[v._v("#")]),v._v(" 解释器模式")]),v._v(" "),t("blockquote",[t("p",[v._v("解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-14"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 对于一些固定文法构建一个解释句子的解释器。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 构建语法树，定义终结符与非终结符。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")]),v._v(" 编译器、运算表达式计算。")]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("可扩展性比较好，灵活。")]),v._v(" "),t("li",[v._v("增加了新的解释表达式的方式。")]),v._v(" "),t("li",[v._v("易于实现简单文法。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("可利用场景比较少。")]),v._v(" "),t("li",[v._v("对于复杂的文法比较难维护。")]),v._v(" "),t("li",[v._v("解释器模式会引起类膨胀。")]),v._v(" "),t("li",[v._v("解释器模式采用递归调用方法。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[t("p",[v._v("可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。")])]),v._v(" "),t("li",[t("p",[v._v("一些重复出现的问题可以用一种简单的语言来进行表达。")])]),v._v(" "),t("li",[t("p",[v._v("一个简单语法需要解释的场景。")])])]),v._v(" "),t("h2",{attrs:{id:"迭代器模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[v._v("#")]),v._v(" 迭代器模式")]),v._v(" "),t("blockquote",[t("p",[v._v("迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。\n迭代器模式属于行为型模式。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-15"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 不同的方式来遍历整个整合对象。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 遍历一个聚合对象。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 把在元素之间游走的责任交给迭代器，而不是聚合对象。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 定义接口：hasNext, next。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")]),v._v("  iterator。")]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("它支持以不同的方式遍历一个聚合对象。")]),v._v(" "),t("li",[v._v("迭代器简化了聚合类。")]),v._v(" "),t("li",[v._v("在同一个聚合上可以有多个遍历。")]),v._v(" "),t("li",[v._v("在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("访问一个聚合对象的内容而无须暴露它的内部表示。")]),v._v(" "),t("li",[v._v("需要为聚合对象提供多种遍历方式。")]),v._v(" "),t("li",[v._v("为遍历不同的聚合结构提供一个统一的接口。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。")]),v._v(" "),t("h2",{attrs:{id:"中介者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[v._v("#")]),v._v(" 中介者模式")]),v._v(" "),t("blockquote",[t("p",[v._v("中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-16"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 多个类相互耦合，形成了网状结构。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 将上述网状结构分离为星型结构。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 对象 Colleague 之间的通信封装到一个类中单独处理。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。")]),v._v(" "),t("li",[v._v("机场调度系统。")]),v._v(" "),t("li",[v._v("MVC 框架，其中 C（控制器）就是 M（模型）和 V（视图）的中介者。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("降低了类的复杂度，将一对多转化成了一对一。")]),v._v(" "),t("li",[v._v("各个类之间的解耦。")]),v._v(" "),t("li",[v._v("符合迪米特原则。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 中介者会庞大，变得复杂难以维护。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。")]),v._v(" "),t("li",[v._v("想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 不应当在职责混乱的时候使用。")]),v._v(" "),t("h2",{attrs:{id:"备忘录模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式"}},[v._v("#")]),v._v(" 备忘录模式")]),v._v(" "),t("p",[v._v("备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。")]),v._v(" "),t("h3",{attrs:{id:"介绍-17"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-17"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(' 很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有 "后悔药" 可吃。')]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 通过一个备忘录类专门存储对象状态。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 客户不与备忘录类耦合，与备忘录管理类耦合。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("后悔药。")]),v._v(" "),t("li",[v._v("打游戏时的存档。")]),v._v(" "),t("li",[v._v("Windows 里的 ctri + z。")]),v._v(" "),t("li",[v._v("IE 中的后退。")]),v._v(" "),t("li",[v._v("数据库的事务管理。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。")]),v._v(" "),t("li",[v._v("实现了信息的封装，使得用户不需要关心状态的保存细节。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("需要保存 / 恢复数据的相关状态场景。")]),v._v(" "),t("li",[v._v("提供一个可回滚的操作。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")])]),v._v(" "),t("ol",[t("li",[v._v("为了符合迪米特原则，还要增加一个管理备忘录的类。")]),v._v(" "),t("li",[v._v("为了节约内存，可使用原型模式 + 备忘录模式")])]),v._v(" "),t("h2",{attrs:{id:"观察者模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[v._v("#")]),v._v(" 观察者模式")]),v._v(" "),t("blockquote",[t("p",[v._v("当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-18"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-18"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 使用面向对象技术，可以将这种依赖关系弱化。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 在抽象类里有一个 ArrayList 存放观察者们。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。")]),v._v(" "),t("li",[v._v("西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("观察者和被观察者是抽象耦合的。")]),v._v(" "),t("li",[v._v("建立一套触发机制。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。")]),v._v(" "),t("li",[v._v("如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。")]),v._v(" "),t("li",[v._v("观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。")]),v._v(" "),t("li",[v._v("一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。")]),v._v(" "),t("li",[v._v("一个对象必须通知其他对象，而并不知道这些对象是谁。")]),v._v(" "),t("li",[v._v("需要在系统中创建一个触发链，A 对象的行为将影响 B 对象，B 对象的行为将影响 C 对象……，可以使用观察者模式创建一种链式触发机制。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")])]),v._v(" "),t("ol",[t("li",[v._v("避免循环引用。")]),v._v(" "),t("li",[v._v("如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。")])]),v._v(" "),t("h2",{attrs:{id:"状态模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[v._v("#")]),v._v(" 状态模式")]),v._v(" "),t("blockquote",[t("p",[v._v("在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。\n在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-19"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-19"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 代码中包含大量与对象状态有关的条件语句。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 将各种具体的状态类抽象出来。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if...else 等条件选择语句。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("打篮球的时候运动员可以有正常状态. 不正常状态和超常状态。")]),v._v(" "),t("li",[v._v("曾侯乙编钟中，'钟是抽象接口','钟 A'等是具体状态，'曾侯乙编钟'是具体环境（Context）。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("封装了转换规则。")]),v._v(" "),t("li",[v._v("枚举可能的状态，在枚举状态之前需要确定状态种类。")]),v._v(" "),t("li",[v._v("将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。")]),v._v(" "),t("li",[v._v("允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。")]),v._v(" "),t("li",[v._v("可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("状态模式的使用必然会增加系统类和对象的个数。")]),v._v(" "),t("li",[v._v("状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。")]),v._v(" "),t("li",[v._v('状态模式对 "开闭原则" 的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。')])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("行为随状态改变而改变的场景。")]),v._v(" "),t("li",[v._v("条件、分支语句的代替者。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。")]),v._v(" "),t("h2",{attrs:{id:"策略模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[v._v("#")]),v._v(" 策略模式")]),v._v(" "),t("blockquote",[t("p",[v._v("在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。\n在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-20"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-20"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 定义一系列的算法, 把它们一个个封装起来, 并且使它们可相互替换。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 在有多种算法相似的情况下，使用 if...else 所带来的复杂和难以维护。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 一个系统有许多许多类，而区分它们的只是他们直接的行为。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 将这些算法封装成一个一个的类，任意地替换。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 实现同一个接口。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("诸葛亮的锦囊妙计，每一个锦囊就是一个策略。")]),v._v(" "),t("li",[v._v("旅行的出游方式，选择骑自行车. 坐汽车，每一种旅行方式都是一个策略。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("算法可以自由切换。")]),v._v(" "),t("li",[v._v("避免使用多重条件判断。")]),v._v(" "),t("li",[v._v("扩展性良好。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")])]),v._v(" "),t("ol",[t("li",[v._v("策略类会增多。")]),v._v(" "),t("li",[v._v("所有策略类都需要对外暴露。")])]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。")]),v._v(" "),t("li",[v._v("一个系统需要动态地在几种算法中选择一种。")]),v._v(" "),t("li",[v._v("如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。")]),v._v(" "),t("h2",{attrs:{id:"模板模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模板模式"}},[v._v("#")]),v._v(" 模板模式")]),v._v(" "),t("blockquote",[t("p",[v._v("在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式 / 模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。")])]),v._v(" "),t("h3",{attrs:{id:"介绍-21"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#介绍-21"}},[v._v("#")]),v._v(" 介绍")]),v._v(" "),t("p",[t("strong",[v._v("意图：")]),v._v(" 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。")]),v._v(" "),t("p",[t("strong",[v._v("主要解决：")]),v._v(" 一些方法通用，却在每一个子类都重新写了这一方法。")]),v._v(" "),t("p",[t("strong",[v._v("何时使用：")]),v._v(" 有一些通用的方法。")]),v._v(" "),t("p",[t("strong",[v._v("如何解决：")]),v._v(" 将这些通用算法抽象出来。")]),v._v(" "),t("p",[t("strong",[v._v("关键代码：")]),v._v(" 在抽象类实现，其他步骤在子类实现。")]),v._v(" "),t("p",[t("strong",[v._v("应用实例：")])]),v._v(" "),t("ol",[t("li",[v._v("在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2. 西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。")]),v._v(" "),t("li",[v._v("spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务. 获取 Session. 关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。")])]),v._v(" "),t("p",[t("strong",[v._v("优点：")])]),v._v(" "),t("ol",[t("li",[v._v("封装不变部分，扩展可变部分。")]),v._v(" "),t("li",[v._v("提取公共代码，便于维护。")]),v._v(" "),t("li",[v._v("行为由父类控制，子类实现。")])]),v._v(" "),t("p",[t("strong",[v._v("缺点：")]),v._v(" 每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。")]),v._v(" "),t("p",[t("strong",[v._v("使用场景：")])]),v._v(" "),t("ol",[t("li",[v._v("有多个子类共有的方法，且逻辑相同。")]),v._v(" "),t("li",[v._v("重要的、复杂的方法，可以考虑作为模板方法。")])]),v._v(" "),t("p",[t("strong",[v._v("注意事项：")]),v._v(" 为防止恶意操作，一般模板方法都加上 final 关键词。")])])}),[],!1,null,null,null);_.default=e.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{228:function(t,a,s){"use strict";s.r(a);var n=s(28),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"工作原理概括"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#工作原理概括"}},[t._v("#")]),t._v(" 工作原理概括")]),t._v(" "),s("h3",{attrs:{id:"基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[t._v("#")]),t._v(" 基本概念")]),t._v(" "),s("p",[t._v("在了解 Webpack 原理前，需要掌握以下几个核心概念，以方便后面的理解：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Entry")]),t._v("：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。")]),t._v(" "),s("li",[s("code",[t._v("Module")]),t._v("：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。")]),t._v(" "),s("li",[s("code",[t._v("Chunk")]),t._v("：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。")]),t._v(" "),s("li",[s("code",[t._v("Loader")]),t._v("：模块转换器，用于把模块原内容按照需求转换成新内容。")]),t._v(" "),s("li",[s("code",[t._v("Plugin")]),t._v("：扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。")])]),t._v(" "),s("h3",{attrs:{id:"流程概括"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程概括"}},[t._v("#")]),t._v(" 流程概括")]),t._v(" "),s("p",[t._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),t._v(" "),s("ol",[s("li",[t._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),t._v(" "),s("li",[t._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")]),t._v(" "),s("li",[t._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),t._v(" "),s("li",[t._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),t._v(" "),s("li",[t._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),t._v(" "),s("li",[t._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),t._v(" "),s("li",[t._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])]),t._v(" "),s("p",[t._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),t._v(" "),s("h3",{attrs:{id:"流程细节"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程细节"}},[t._v("#")]),t._v(" 流程细节")]),t._v(" "),s("p",[t._v("Webpack 的构建流程可以分为以下三大阶段：")]),t._v(" "),s("ol",[s("li",[t._v("初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler。")]),t._v(" "),s("li",[t._v("编译：从 Entry 发出，针对每个 Module 串行调用对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。")]),t._v(" "),s("li",[t._v("输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。")])]),t._v(" "),s("p",[t._v("如果只执行一次构建，以上阶段将会按照顺序各执行一次。但在开启监听模式下，流程将变为如下：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://camo.githubusercontent.com/e226947931ee404d8b693fa15cda9d5412918553/687474703a2f2f7765627061636b2e777568616f6c696e2e636e2f352545352538452539462545372539302538362f696d672f352d312545372539422539312545352539302541432545362541382541312545352542432538462545372539412538342545362539452538342545352542422542412545362542352538312545372541382538422e706e67",target:"_blank",rel:"noopener noreferrer"}},[s("img",{attrs:{src:"https://camo.githubusercontent.com/e226947931ee404d8b693fa15cda9d5412918553/687474703a2f2f7765627061636b2e777568616f6c696e2e636e2f352545352538452539462545372539302538362f696d672f352d312545372539422539312545352539302541432545362541382541312545352542432538462545372539412538342545362539452538342545352542422542412545362542352538312545372541382538422e706e67",alt:"img"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("在每个大阶段中又会发生很多事件，Webpack 会把这些事件广播出来供给 Plugin 使用，下面来一一介绍。")]),t._v(" "),s("h3",{attrs:{id:"初始化阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段"}},[t._v("#")]),t._v(" 初始化阶段")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("事件名")]),t._v(" "),s("th",[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("初始化参数")]),t._v(" "),s("td",[t._v("从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。 这个过程中还会执行配置文件中的插件实例化语句 "),s("code",[t._v("new Plugin()")]),t._v("。")])]),t._v(" "),s("tr",[s("td",[t._v("实例化 "),s("code",[t._v("Compiler")])]),t._v(" "),s("td",[t._v("用上一步得到的参数初始化 "),s("code",[t._v("Compiler")]),t._v(" 实例，"),s("code",[t._v("Compiler")]),t._v(" 负责文件监听和启动编译。"),s("code",[t._v("Compiler")]),t._v(" 实例中包含了完整的 "),s("code",[t._v("Webpack")]),t._v(" 配置，全局只有一个 "),s("code",[t._v("Compiler")]),t._v(" 实例。")])]),t._v(" "),s("tr",[s("td",[t._v("加载插件")]),t._v(" "),s("td",[t._v("依次调用插件的 "),s("code",[t._v("apply")]),t._v(" 方法，让插件可以监听后续的所有事件节点。同时给插件传入 "),s("code",[t._v("compiler")]),t._v(" 实例的引用，以方便插件通过 "),s("code",[t._v("compiler")]),t._v(" 调用 Webpack 提供的 API。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("environment")])]),t._v(" "),s("td",[t._v("开始应用 Node.js 风格的文件系统到 compiler 对象，以方便后续的文件寻找和读取。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("entry-option")])]),t._v(" "),s("td",[t._v("读取配置的 "),s("code",[t._v("Entrys")]),t._v("，为每个 "),s("code",[t._v("Entry")]),t._v(" 实例化一个对应的 "),s("code",[t._v("EntryPlugin")]),t._v("，为后面该 "),s("code",[t._v("Entry")]),t._v(" 的递归解析工作做准备。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("after-plugins")])]),t._v(" "),s("td",[t._v("调用完所有内置的和配置的插件的 "),s("code",[t._v("apply")]),t._v(" 方法。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("after-resolvers")])]),t._v(" "),s("td",[t._v("根据配置初始化完 "),s("code",[t._v("resolver")]),t._v("，"),s("code",[t._v("resolver")]),t._v(" 负责在文件系统中寻找指定路径的文件。")])])])]),t._v(" "),s("h3",{attrs:{id:"编译阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段"}},[t._v("#")]),t._v(" 编译阶段")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("事件名")]),t._v(" "),s("th",[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("run")])]),t._v(" "),s("td",[t._v("启动一次新的编译。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("watch-run")])]),t._v(" "),s("td",[t._v("和 "),s("code",[t._v("run")]),t._v(" 类似，区别在于它是在监听模式下启动的编译，在这个事件中可以获取到是哪些文件发生了变化导致重新启动一次新的编译。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("compile")])]),t._v(" "),s("td",[t._v("该事件是为了告诉插件一次新的编译将要启动，同时会给插件带上 "),s("code",[t._v("compiler")]),t._v(" 对象。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("compilation")])]),t._v(" "),s("td",[t._v("当 "),s("code",[t._v("Webpack")]),t._v(" 以开发模式运行时，每当检测到文件变化，一次新的 "),s("code",[t._v("Compilation")]),t._v(" 将被创建。一个 "),s("code",[t._v("Compilation")]),t._v(" 对象包含了当前的模块资源、编译生成资源、变化的文件等。"),s("code",[t._v("Compilation")]),t._v(" 对象也提供了很多事件回调供插件做扩展。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("make")])]),t._v(" "),s("td",[t._v("一个新的 "),s("code",[t._v("Compilation")]),t._v(" 创建完毕，即将从 "),s("code",[t._v("Entry")]),t._v(" 开始读取文件，根据文件类型和配置的 "),s("code",[t._v("Loader")]),t._v("对文件进行编译，编译完后再找出该文件依赖的文件，递归的编译和解析。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("after-compile")])]),t._v(" "),s("td",[t._v("一次 "),s("code",[t._v("Compilation")]),t._v(" 执行完成。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("invalid")])]),t._v(" "),s("td",[t._v("当遇到文件不存在、文件编译错误等异常时会触发该事件，该事件不会导致 Webpack 退出。")])]),t._v(" "),s("tr",[s("td",[t._v("空格")]),t._v(" "),s("td",[t._v("空格")])]),t._v(" "),s("tr",[s("td",[t._v("空格")]),t._v(" "),s("td",[t._v("空格")])])])]),t._v(" "),s("p",[t._v("在编译阶段中，最重要的要数 "),s("code",[t._v("compilation")]),t._v(" 事件了，因为在 "),s("code",[t._v("compilation")]),t._v(" 阶段调用了 Loader 完成了每个模块的转换操作，在 "),s("code",[t._v("compilation")]),t._v(" 阶段又包括很多小的事件，它们分别是：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("事件名")]),t._v(" "),s("th",[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("build-module")])]),t._v(" "),s("td",[t._v("使用对应的 Loader 去转换一个模块。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("normal-module-loader")])]),t._v(" "),s("td",[t._v("在用 Loader 对一个模块转换完后，使用 "),s("code",[t._v("acorn")]),t._v(" 解析转换后的内容，输出对应的抽象语法树（"),s("code",[t._v("AST")]),t._v("），以方便 Webpack 后面对代码的分析。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("program")])]),t._v(" "),s("td",[t._v("从配置的入口模块开始，分析其 AST，当遇到 require 等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("seal")])]),t._v(" "),s("td",[t._v("所有模块及其依赖的模块都通过 Loader 转换完成后，根据依赖关系开始生成 Chunk。")])])])]),t._v(" "),s("h3",{attrs:{id:"输出阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出阶段"}},[t._v("#")]),t._v(" 输出阶段")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("事件名")]),t._v(" "),s("th",[t._v("解释")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("should-emit")])]),t._v(" "),s("td",[t._v("所有需要输出的文件已经生成好，询问插件哪些文件需要输出，哪些不需要。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("emit")])]),t._v(" "),s("td",[t._v("确定好要输出哪些文件后，执行文件输出，可以在这里获取和修改输出内容。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("after-emit")])]),t._v(" "),s("td",[t._v("文件输出完毕。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("done")])]),t._v(" "),s("td",[t._v("成功完成一次完成的编译和输出流程。")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("failed")])]),t._v(" "),s("td",[t._v("如果在编译和输出流程中遇到异常导致 Webpack 退出时，就会直接跳转到本步骤，插件可以在本事件中获取到具体的错误原因。")])])])]),t._v(" "),s("p",[t._v("在输出阶段已经得到了各个模块经过转换后的结果和其依赖关系，并且把相关模块组合在一起形成一个个 Chunk。 在输出阶段会根据 Chunk 的类型，使用对应的模版生成最终要要输出的文件内容。")]),t._v(" "),s("h2",{attrs:{id:"输出文件分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#输出文件分析"}},[t._v("#")]),t._v(" 输出文件分析")]),t._v(" "),s("p",[t._v("虽然在前面的章节中你学会了如何使用 Webpack ，也大致知道其工作原理，可是你想过 Webpack 输出的 "),s("code",[t._v("bundle.js")]),t._v(" 是什么样子的吗？ 为什么原来一个个的模块文件被合并成了一个单独的文件？为什么 "),s("code",[t._v("bundle.js")]),t._v(" 能直接运行在浏览器中？ 本节将解释清楚以上问题。")]),t._v(" "),s("p",[t._v("先来看看由 安装与使用 中最简单的项目构建出的 "),s("code",[t._v("bundle.js")]),t._v(" 文件内容，代码如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpackBootstrap 启动函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// modules 即为存放所有模块的数组，数组中的每一个元素都是一个函数")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("modules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 安装过的模块都存放在这里面")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作用是把已经加载过的模块缓存在内存中，提升性能")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" installedModules "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 去数组中加载一个模块，moduleId 为要加载模块在数组中的 index")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作用和 Node.js 中 require 语句相似")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("moduleId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果需要加载的模块已经被加载过，就直接从内存缓存中返回")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installedModules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" installedModules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果缓存中不存在需要加载的模块，就新建一个模块，并把它存在缓存中")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" module "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" installedModules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模块在数组中的 index")]),t._v("\n                i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该模块是否已经加载完毕")]),t._v("\n                l"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该模块的导出值")]),t._v("\n                exports"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 modules 中获取 index 为 moduleId 的模块对应的函数")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再调用这个函数，同时把函数需要的参数传入")]),t._v("\n            modules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __webpack_require__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把这个模块标记为已加载")]),t._v("\n            module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("l "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回这个模块的导出值")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Webpack 配置中的 publicPath，用于加载被分割出去的异步代码")]),t._v("\n        __webpack_require__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 __webpack_require__ 去加载 index 为 0 的模块，并且返回该模块导出的内容")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// index 为 0 的模块就是 main.js 对应的文件，也就是执行入口模块")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __webpack_require__.s 的含义是启动模块对应的 index")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__webpack_require__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 所有的模块都存放在了一个数组里，根据每个模块在数组的 index 来区分和定位模块")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 0 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 __webpack_require__ 规范导入 show 函数，show.js 对应的模块 index 为 1")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" show "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行 show 函数")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Webpack'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 1 */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'app'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello,'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" content"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 CommonJS 规范导出 show 函数")]),t._v("\n            module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" show"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("以上看上去复杂的代码其实是一个立即执行函数，可以简写为如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("(function(modules) {\n\n  // 模拟 require 语句\n  function __webpack_require__() {\n  }\n\n  // 执行存放所有模块数组中的第0个模块\n  __webpack_require__(0);\n\n})([/*存放所有模块的数组*/])\n")])])]),s("p",[s("code",[t._v("bundle.js")]),t._v(" 能直接运行在浏览器中的原因在于输出的文件中通过 "),s("code",[t._v("__webpack_require__")]),t._v(" 函数定义了一个可以在浏览器中执行的加载函数来模拟 Node.js 中的 "),s("code",[t._v("require")]),t._v(" 语句。")]),t._v(" "),s("p",[t._v("原来一个个独立的模块文件被合并到了一个单独的 "),s("code",[t._v("bundle.js")]),t._v(" 的原因在于浏览器不能像 Node.js 那样快速地去本地加载一个个模块文件，而必须通过网络请求去加载还未得到的文件。 如果模块数量很多，加载时间会很长，因此把所有模块都存放在了数组中，执行一次网络加载。")]),t._v(" "),s("p",[t._v("如果仔细分析 "),s("code",[t._v("__webpack_require__")]),t._v(" 函数的实现，你还有发现 Webpack 做了缓存优化： 执行加载过的模块不会再执行第二次，执行结果会缓存在内存中，当某个模块第二次被访问时会直接去内存中读取被缓存的返回值。")]),t._v(" "),s("h3",{attrs:{id:"分割代码时的输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分割代码时的输出"}},[t._v("#")]),t._v(" 分割代码时的输出")]),t._v(" "),s("p",[t._v("例如把源码中的 "),s("code",[t._v("main.js")]),t._v(" 修改为如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 异步加载 show.js\nimport('./show').then((show) => {\n  // 执行 show 函数\n  show('Webpack');\n});\n")])])]),s("p",[t._v("重新构建后会输出两个文件，分别是执行入口文件 "),s("code",[t._v("bundle.js")]),t._v(" 和 异步加载文件 "),s("code",[t._v("0.bundle.js")]),t._v("。")]),t._v(" "),s("p",[t._v("其中 "),s("code",[t._v("0.bundle.js")]),t._v(" 内容如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 加载在本文件(0.bundle.js)中包含的模块\nwebpackJsonp(\n  // 在其它文件中存放着的模块的 ID\n  [0],\n  // 本文件所包含的模块\n  [\n    // show.js 所对应的模块\n    (function (module, exports) {\n      function show(content) {\n        window.document.getElementById('app').innerText = 'Hello,' + content;\n      }\n\n      module.exports = show;\n    })\n  ]\n);\n")])])]),s("p",[s("code",[t._v("bundle.js")]),t._v(" 内容如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("modules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/***\n   * webpackJsonp 用于从异步加载的文件中安装模块。\n   * 把 webpackJsonp 挂载到全局是为了方便在其它文件中调用。\n   *\n   * @param chunkIds 异步加载的文件中存放的需要安装的模块对应的 Chunk ID\n   * @param moreModules 异步加载的文件中存放的需要安装的模块列表\n   * @param executeModules 在异步加载的文件中存放的需要安装的模块都安装成功后，需要执行的模块对应的 index\n   */")]),t._v("\n  window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"webpackJsonp"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("webpackJsonpCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunkIds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" moreModules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" executeModules")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 moreModules 添加到 modules 对象中")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把所有 chunkIds 对应的模块都标记成已经加载成功 ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" resolves "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" chunkIds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      chunkId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" chunkIds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installedChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        resolves"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installedChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      installedChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moduleId "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" moreModules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("moreModules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        modules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" moreModules"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("moduleId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resolves"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      resolves"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 缓存已经安装的模块")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" installedModules "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储每个 Chunk 的加载状态；")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 键为 Chunk 的 ID，值为0代表已经加载成功")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" installedChunks "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 模拟 require 语句，和上面介绍的一致")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("moduleId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ... 省略和上面一样的内容")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n   * 用于加载被分割出去的，需要异步加载的 Chunk 对应的文件\n   * @param chunkId 需要异步加载的 Chunk 对应的 ID\n   * @returns {Promise}\n   */")]),t._v("\n  __webpack_require__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("e")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requireEnsure")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunkId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从上面定义的 installedChunks 中获取 chunkId 对应的 Chunk 的加载状态")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" installedChunkData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" installedChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果加载状态为0表示该 Chunk 已经加载成功了，直接返回 resolve Promise")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installedChunkData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// installedChunkData 不为空且不为0表示该 Chunk 正在网络加载中")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("installedChunkData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回存放在 installedChunkData 数组中的 Promise 对象")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" installedChunkData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// installedChunkData 为空，表示该 Chunk 还没有加载过，去加载该 Chunk 对应的文件")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" promise "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      installedChunkData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" installedChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("resolve"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    installedChunkData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" promise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 DOM 操作，往 HTML head 中插入一个 script 标签去异步加载 Chunk 对应的 JavaScript 文件")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'head'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("charset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf-8'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("async "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文件的路径为配置的 publicPath、chunkId 拼接而成")]),t._v("\n    script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" __webpack_require__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" chunkId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('".bundle.js"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置异步加载的最长超时时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" timeout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onScriptComplete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("120000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onerror "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onload "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" onScriptComplete"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 script 加载和执行完成时回调")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("onScriptComplete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 防止内存泄露")]),t._v("\n      script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onerror "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onload "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("clearTimeout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timeout"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 去检查 chunkId 对应的 Chunk 是否安装成功，安装成功时才会存在于 installedChunks 中")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" chunk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" installedChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Loading chunk '")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" chunkId "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("' failed.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        installedChunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("chunkId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" promise"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 加载并执行入口模块，和上面介绍的一致")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__webpack_require__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存放所有没有经过异步加载的，随着执行入口文件加载的模块")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.js 对应的模块")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" exports"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过 __webpack_require__.e 去异步加载 show.js 对应的 Chunk")]),t._v("\n      __webpack_require__"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("__webpack_require__")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行 show 函数")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("show")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Webpack'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("这里的 "),s("code",[t._v("bundle.js")]),t._v(" 和上面所讲的 "),s("code",[t._v("bundle.js")]),t._v(" 非常相似，区别在于：")]),t._v(" "),s("ul",[s("li",[t._v("多了一个 "),s("code",[t._v("__webpack_require__.e")]),t._v(" 用于加载被分割出去的，需要异步加载的 Chunk 对应的文件;")]),t._v(" "),s("li",[t._v("多了一个 "),s("code",[t._v("webpackJsonp")]),t._v(" 函数用于从异步加载的文件中安装模块。")])]),t._v(" "),s("p",[t._v("在使用了 "),s("code",[t._v("CommonsChunkPlugin")]),t._v(" 去提取公共代码时输出的文件和使用了异步加载时输出的文件是一样的，都会有 "),s("code",[t._v("__webpack_require__.e")]),t._v(" 和 "),s("code",[t._v("webpackJsonp")]),t._v("。 原因在于提取公共代码和异步加载本质上都是代码分割。")]),t._v(" "),s("h2",{attrs:{id:"编写-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写-loader"}},[t._v("#")]),t._v(" 编写 Loader")]),t._v(" "),s("p",[t._v("Loader 就像是一个翻译员，能把源文件经过转化后输出新的结果，并且一个文件还可以链式的经过多个翻译员翻译。")]),t._v(" "),s("p",[t._v("以处理 SCSS 文件为例：")]),t._v(" "),s("ul",[s("li",[t._v("SCSS 源代码会先交给 "),s("code",[t._v("sass-loader")]),t._v(" 把 SCSS 转换成 CSS；")]),t._v(" "),s("li",[t._v("把 "),s("code",[t._v("sass-loader")]),t._v(" 输出的 CSS 交给 "),s("code",[t._v("css-loader")]),t._v(" 处理，找出 CSS 中依赖的资源、压缩 CSS 等；")]),t._v(" "),s("li",[t._v("把 "),s("code",[t._v("css-loader")]),t._v(" 输出的 CSS 交给 "),s("code",[t._v("style-loader")]),t._v(" 处理，转换成通过脚本加载的 JavaScript 代码；")])]),t._v(" "),s("p",[t._v("可以看出以上的处理过程需要有顺序的链式执行，先 "),s("code",[t._v("sass-loader")]),t._v(" 再 "),s("code",[t._v("css-loader")]),t._v(" 再 "),s("code",[t._v("style-loader")]),t._v("。 以上处理的 Webpack 相关配置如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  module"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    rules"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 增加对 SCSS 文件的支持")]),t._v("\n        test"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.scss/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SCSS 文件的处理顺序为先 sass-loader 再 css-loader 再 style-loader")]),t._v("\n        use"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style-loader'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            loader"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'css-loader'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给 css-loader 传入配置项")]),t._v("\n            options"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              minimize"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sass-loader'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"loader-的职责"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader-的职责"}},[t._v("#")]),t._v(" Loader 的职责")]),t._v(" "),s("p",[t._v("由上面的例子可以看出：一个 Loader 的职责是单一的，只需要完成一种转换。 如果一个源文件需要经历多步转换才能正常使用，就通过多个 Loader 去转换。 在调用多个 Loader 去转换一个文件时，每个 Loader 会链式的顺序执行， 第一个 Loader 将会拿到需处理的原内容，上一个 Loader 处理后的结果会传给下一个接着处理，最后的 Loader 将处理后的最终结果返回给 Webpack。")]),t._v(" "),s("p",[t._v("所以，在你开发一个 Loader 时，请保持其职责的单一性，你只需关心输入和输出。")]),t._v(" "),s("h3",{attrs:{id:"loader-基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader-基础"}},[t._v("#")]),t._v(" Loader 基础")]),t._v(" "),s("p",[t._v("由于 Webpack 是运行在 Node.js 之上的，一个 Loader 其实就是一个 Node.js 模块，这个模块需要导出一个函数。 这个导出的函数的工作就是获得处理前的原内容，对原内容执行处理后，返回处理后的内容。")]),t._v(" "),s("p",[t._v("一个最简单的 Loader 的源码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = function(source) {\n  // source 为 compiler 传递给 Loader 的一个文件的原内容\n  // 该函数需要返回处理后的内容，这里简单起见，直接把原内容返回了，相当于该 Loader 没有做任何转换\n  return source;\n};\n")])])]),s("p",[t._v("由于 Loader 运行在 Node.js 中，你可以调用任何 Node.js 自带的 API，或者安装第三方模块进行调用：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const sass = require('node-sass');\nmodule.exports = function(source) {\n  return sass(source);\n};\n")])])]),s("h3",{attrs:{id:"loader-进阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#loader-进阶"}},[t._v("#")]),t._v(" Loader 进阶")]),t._v(" "),s("p",[t._v("以上只是个最简单的 Loader，Webpack 还提供一些 API 供 Loader 调用，下面来一一介绍。")]),t._v(" "),s("h4",{attrs:{id:"获得-loader-的-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获得-loader-的-options"}},[t._v("#")]),t._v(" 获得 Loader 的 "),s("code",[t._v("options")])]),t._v(" "),s("p",[t._v("在最上面处理 SCSS 文件的 Webpack 配置中，给 "),s("code",[t._v("css-loader")]),t._v(" 传了 "),s("code",[t._v("options")]),t._v(" 参数，以控制 "),s("code",[t._v("css-loader")]),t._v("。 如何在自己编写的 Loader 中获取到用户传入的 "),s("code",[t._v("options")]),t._v(" 呢？需要这样做：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const loaderUtils = require('loader-utils');\nmodule.exports = function(source) {\n  // 获取到用户给当前 Loader 传入的 options\n  const options = loaderUtils.getOptions(this);\n  return source;\n};\n")])])]),s("h4",{attrs:{id:"返回其它结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#返回其它结果"}},[t._v("#")]),t._v(" 返回其它结果")]),t._v(" "),s("p",[t._v("上面的 Loader 都只是返回了原内容转换后的内容，但有些场景下还需要返回除了内容之外的东西。")]),t._v(" "),s("p",[t._v("例如以用 "),s("code",[t._v("babel-loader")]),t._v(" 转换 ES6 代码为例，它还需要输出转换后的 ES5 代码对应的 Source Map，以方便调试源码。 为了把 Source Map 也一起随着 ES5 代码返回给 Webpack，可以这样写：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = function(source) {\n  // 通过 this.callback 告诉 Webpack 返回的结果\n  this.callback(null, source, sourceMaps);\n  // 当你使用 this.callback 返回内容时，该 Loader 必须返回 undefined，\n  // 以让 Webpack 知道该 Loader 返回的结果在 this.callback 中，而不是 return 中 \n  return;\n};\n")])])]),s("p",[t._v("其中的 "),s("code",[t._v("this.callback")]),t._v(" 是 Webpack 给 Loader 注入的 API，以方便 Loader 和 Webpack 之间通信。 "),s("code",[t._v("this.callback")]),t._v(" 的详细使用方法如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("this.callback(\n    // 当无法转换原内容时，给 Webpack 返回一个 Error\n    err: Error | null,\n    // 原内容转换后的内容\n    content: string | Buffer,\n    // 用于把转换后的内容得出原内容的 Source Map，方便调试\n    sourceMap?: SourceMap,\n    // 如果本次转换为原内容生成了 AST 语法树，可以把这个 AST 返回，\n    // 以方便之后需要 AST 的 Loader 复用该 AST，以避免重复生成 AST，提升性能\n    abstractSyntaxTree?: AST\n);\n")])])]),s("blockquote",[s("p",[t._v("Source Map 的生成很耗时，通常在开发环境下才会生成 Source Map，其它环境下不用生成，以加速构建。 为此 Webpack 为 Loader 提供了 "),s("code",[t._v("this.sourceMap")]),t._v(" API 去告诉 Loader 当前构建环境下用户是否需要 Source Map。 如果你编写的 Loader 会生成 Source Map，请考虑到这点。")])]),t._v(" "),s("h3",{attrs:{id:"同步与异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步与异步"}},[t._v("#")]),t._v(" 同步与异步")]),t._v(" "),s("p",[t._v("Loader 有同步和异步之分，上面介绍的 Loader 都是同步的 Loader，因为它们的转换流程都是同步的，转换完成后再返回结果。 但在有些场景下转换的步骤只能是异步完成的，例如你需要通过网络请求才能得出结果，如果采用同步的方式网络请求就会阻塞整个构建，导致构建非常缓慢。")]),t._v(" "),s("p",[t._v("在转换步骤是异步时，你可以这样：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = function(source) {\n    // 告诉 Webpack 本次转换是异步的，Loader 会在 callback 中回调结果\n    var callback = this.async();\n    someAsyncOperation(source, function(err, result, sourceMaps, ast) {\n        // 通过 callback 返回异步执行后的结果\n        callback(err, result, sourceMaps, ast);\n    });\n};\n")])])]),s("h3",{attrs:{id:"处理二进制数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理二进制数据"}},[t._v("#")]),t._v(" 处理二进制数据")]),t._v(" "),s("p",[t._v("在默认的情况下，Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串。 但有些场景下 Loader 不是处理文本文件，而是处理二进制文件，例如 "),s("code",[t._v("file-loader")]),t._v("，就需要 Webpack 给 Loader 传入二进制格式的数据。 为此，你需要这样编写 Loader：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = function(source) {\n    // 在 exports.raw === true 时，Webpack 传给 Loader 的 source 是 Buffer 类型的\n    source instanceof Buffer === true;\n    // Loader 返回的类型也可以是 Buffer 类型的\n    // 在 exports.raw !== true 时，Loader 也可以返回 Buffer 类型的结果\n    return source;\n};\n// 通过 exports.raw 属性告诉 Webpack 该 Loader 是否需要二进制数据 \nmodule.exports.raw = true;\n")])])]),s("p",[t._v("以上代码中最关键的代码是最后一行 "),s("code",[t._v("module.exports.raw = true;")]),t._v("，没有该行 Loader 只能拿到字符串。")]),t._v(" "),s("h3",{attrs:{id:"缓存加速"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存加速"}},[t._v("#")]),t._v(" 缓存加速")]),t._v(" "),s("p",[t._v("在有些情况下，有些转换操作需要大量计算非常耗时，如果每次构建都重新执行重复的转换操作，构建将会变得非常缓慢。 为此，Webpack 会默认缓存所有 Loader 的处理结果，也就是说在需要被处理的文件或者其依赖的文件没有发生变化时， 是不会重新调用对应的 Loader 去执行转换操作的。")]),t._v(" "),s("p",[t._v("如果你想让 Webpack 不缓存该 Loader 的处理结果，可以这样：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = function(source) {\n  // 关闭该 Loader 的缓存功能\n  this.cacheable(false);\n  return source;\n};\n")])])]),s("h3",{attrs:{id:"其它-loader-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它-loader-api"}},[t._v("#")]),t._v(" 其它 Loader API")]),t._v(" "),s("p",[t._v("除了以上提到的在 Loader 中能调用的 Webpack API 外，还存在以下常用 API：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("this.context")]),t._v("：当前处理文件的所在目录，假如当前 Loader 处理的文件是 "),s("code",[t._v("/src/main.js")]),t._v("，则 "),s("code",[t._v("this.context")]),t._v(" 就等于 "),s("code",[t._v("/src")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.resource")]),t._v("：当前处理文件的完整请求路径，包括 "),s("code",[t._v("querystring")]),t._v("，例如 "),s("code",[t._v("/src/main.js?name=1")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.resourcePath")]),t._v("：当前处理文件的路径，例如 "),s("code",[t._v("/src/main.js")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.resourceQuery")]),t._v("：当前处理文件的 "),s("code",[t._v("querystring")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.target")]),t._v("：等于 Webpack 配置中的 Target。")]),t._v(" "),s("li",[s("code",[t._v("this.loadModule")]),t._v("：但 Loader 在处理一个文件时，如果依赖其它文件的处理结果才能得出当前文件的结果时， 就可以通过 "),s("code",[t._v("this.loadModule(request: string, callback: function(err, source, sourceMap, module))")]),t._v(" 去获得 "),s("code",[t._v("request")]),t._v(" 对应文件的处理结果。")]),t._v(" "),s("li",[s("code",[t._v("this.resolve")]),t._v("：像 "),s("code",[t._v("require")]),t._v(" 语句一样获得指定文件的完整路径，使用方法为 "),s("code",[t._v("resolve(context: string, request: string, callback: function(err, result: string))")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.addDependency")]),t._v("：给当前处理文件添加其依赖的文件，以便再其依赖的文件发生变化时，会重新调用 Loader 处理该文件。使用方法为 "),s("code",[t._v("addDependency(file: string)")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.addContextDependency")]),t._v("：和 "),s("code",[t._v("addDependency")]),t._v(" 类似，但 "),s("code",[t._v("addContextDependency")]),t._v(" 是把整个目录加入到当前正在处理文件的依赖中。使用方法为 "),s("code",[t._v("addContextDependency(directory: string)")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.clearDependencies")]),t._v("：清除当前正在处理文件的所有依赖，使用方法为 "),s("code",[t._v("clearDependencies()")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("this.emitFile")]),t._v("：输出一个文件，使用方法为 "),s("code",[t._v("emitFile(name: string, content: Buffer|string, sourceMap: {...})")]),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"加载本地-loader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载本地-loader"}},[t._v("#")]),t._v(" 加载本地 Loader")]),t._v(" "),s("p",[t._v("在开发 Loader 的过程中，为了测试编写的 Loader 是否能正常工作，需要把它配置到 Webpack 中后，才可能会调用该 Loader。 在前面的章节中，使用的 Loader 都是通过 Npm 安装的，要使用 Loader 时会直接使用 Loader 的名称，代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css/,\n        use: ['style-loader'],\n      },\n    ]\n  },\n};\n")])])]),s("p",[t._v("如果还采取以上的方法去使用本地开发的 Loader 将会很麻烦，因为你需要确保编写的 Loader 的源码是在 "),s("code",[t._v("node_modules")]),t._v("目录下。 为此你需要先把编写的 Loader 发布到 Npm 仓库后再安装到本地项目使用。")]),t._v(" "),s("p",[t._v("解决以上问题的便捷方法有两种，分别如下：")]),t._v(" "),s("h3",{attrs:{id:"npm-link"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#npm-link"}},[t._v("#")]),t._v(" "),s("code",[t._v("Npm link")])]),t._v(" "),s("p",[t._v("Npm link 专门用于开发和调试本地 Npm 模块，能做到在不发布模块的情况下，把本地的一个正在开发的模块的源码链接到项目的 "),s("code",[t._v("node_modules")]),t._v(" 目录下，让项目可以直接使用本地的 Npm 模块。 由于是通过软链接的方式实现的，编辑了本地的 Npm 模块代码，在项目中也能使用到编辑后的代码。")]),t._v(" "),s("p",[t._v("完成 Npm link 的步骤如下：")]),t._v(" "),s("ul",[s("li",[t._v("确保正在开发的本地 Npm 模块（也就是正在开发的 Loader）的 "),s("code",[t._v("package.json")]),t._v(" 已经正确配置好；")]),t._v(" "),s("li",[t._v("在本地 Npm 模块根目录下执行 "),s("code",[t._v("npm link")]),t._v("，把本地模块注册到全局；")]),t._v(" "),s("li",[t._v("在项目根目录下执行 "),s("code",[t._v("npm link loader-name")]),t._v("，把第2步注册到全局的本地 Npm 模块链接到项目的 "),s("code",[t._v("node_moduels")]),t._v("下，其中的 "),s("code",[t._v("loader-name")]),t._v(" 是指在第1步中的 "),s("code",[t._v("package.json")]),t._v(" 文件中配置的模块名称。")])]),t._v(" "),s("p",[t._v("链接好 Loader 到项目后你就可以像使用一个真正的 Npm 模块一样使用本地的 Loader 了。")]),t._v(" "),s("h3",{attrs:{id:"resolveloader"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#resolveloader"}},[t._v("#")]),t._v(" "),s("code",[t._v("ResolveLoader")])]),t._v(" "),s("p",[t._v("ResolveLoader 用于配置 Webpack 如何寻找 Loader。 默认情况下只会去 "),s("code",[t._v("node_modules")]),t._v(" 目录下寻找，为了让 Webpack 加载放在本地项目中的 Loader 需要修改 "),s("code",[t._v("resolveLoader.modules")]),t._v("。")]),t._v(" "),s("p",[t._v("假如本地的 Loader 在项目目录中的 "),s("code",[t._v("./loaders/loader-name")]),t._v(" 中，则需要如下配置：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n  resolveLoader:{\n    // 去哪些目录下寻找 Loader，有先后顺序之分\n    modules: ['node_modules','./loaders/'],\n  }\n}\n")])])]),s("p",[t._v("加上以上配置后， Webpack 会先去 "),s("code",[t._v("node_modules")]),t._v(" 项目下寻找 Loader，如果找不到，会再去 "),s("code",[t._v("./loaders/")]),t._v("目录下寻找。")]),t._v(" "),s("h3",{attrs:{id:"实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[t._v("#")]),t._v(" 实战")]),t._v(" "),s("p",[t._v("上面讲了许多理论，接下来从实际出发，来编写一个解决实际问题的 Loader。")]),t._v(" "),s("p",[t._v("该 Loader 名叫 "),s("code",[t._v("comment-require-loader")]),t._v("，作用是把 JavaScript 代码中的注释语法：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// @require '../style/index.css'\n")])])]),s("p",[t._v("转换成：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("require('../style/index.css');\n")])])]),s("p",[t._v("该 Loader 的使用场景是去正确加载针对 "),s("a",{attrs:{href:"http://fis.baidu.com/fis3/docs/user-dev/require.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fis3"),s("OutboundLink")],1),t._v(" 编写的 JavaScript，这些 JavaScript 中存在通过注释的方式加载依赖的 CSS 文件。")]),t._v(" "),s("p",[t._v("该 Loader 的使用方法如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['comment-require-loader'],\n        // 针对采用了 fis3 CSS 导入语法的 JavaScript 文件通过 comment-require-loader 去转换 \n        include: [path.resolve(__dirname, 'node_modules/imui')]\n      }\n    ]\n  }\n};\n")])])]),s("p",[t._v("该 Loader 的实现非常简单，完整代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("function replace(source) {\n    // 使用正则把 // @require '../style/index.css' 转换成 require('../style/index.css');  \n    return source.replace(/(\\/\\/ *@require) +(('|\").+('|\")).*/, 'require($2);');\n}\n\nmodule.exports = function (content) {\n    return replace(content);\n};\n")])])]),s("h2",{attrs:{id:"编写-plugin"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编写-plugin"}},[t._v("#")]),t._v(" 编写 Plugin")]),t._v(" "),s("p",[t._v("Webpack 通过 Plugin 机制让其更加灵活，以适应各种应用场景。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。")]),t._v(" "),s("p",[t._v("一个最基础的 Plugin 的代码是这样的：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class BasicPlugin{\n  // 在构造函数中获取用户给该插件传入的配置\n  constructor(options){\n  }\n\n  // Webpack 会调用 BasicPlugin 实例的 apply 方法给插件实例传入 compiler 对象\n  apply(compiler){\n    compiler.plugin('compilation',function(compilation) {\n    })\n  }\n}\n\n// 导出 Plugin\nmodule.exports = BasicPlugin;\n")])])]),s("p",[t._v("在使用这个 Plugin 时，相关配置代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const BasicPlugin = require('./BasicPlugin.js');\nmodule.export = {\n  plugins:[\n    new BasicPlugin(options),\n  ]\n}\n")])])]),s("p",[t._v("Webpack 启动后，在读取配置的过程中会先执行 "),s("code",[t._v("new BasicPlugin(options)")]),t._v(" 初始化一个 "),s("code",[t._v("BasicPlugin")]),t._v(" 获得其实例。 在初始化 "),s("code",[t._v("compiler")]),t._v(" 对象后，再调用 "),s("code",[t._v("basicPlugin.apply(compiler)")]),t._v(" 给插件实例传入 "),s("code",[t._v("compiler")]),t._v(" 对象。 插件实例在获取到 "),s("code",[t._v("compiler")]),t._v(" 对象后，就可以通过 "),s("code",[t._v("compiler.plugin(事件名称, 回调函数)")]),t._v(" 监听到 Webpack 广播出来的事件。 并且可以通过 "),s("code",[t._v("compiler")]),t._v(" 对象去操作 Webpack。")]),t._v(" "),s("p",[t._v("通过以上最简单的 Plugin 相信你大概明白了 Plugin 的工作原理，但实际开发中还有很多细节需要注意，下面来详细介绍。")]),t._v(" "),s("h3",{attrs:{id:"compiler-和-compilation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compiler-和-compilation"}},[t._v("#")]),t._v(" "),s("code",[t._v("Compiler")]),t._v(" 和 "),s("code",[t._v("Compilation")])]),t._v(" "),s("p",[t._v("在开发 Plugin 时最常用的两个对象就是 Compiler 和 Compilation，它们是 Plugin 和 Webpack 之间的桥梁。 Compiler 和 Compilation 的含义如下：")]),t._v(" "),s("ul",[s("li",[t._v("Compiler 对象包含了 Webpack 环境所有的的配置信息，包含 "),s("code",[t._v("options")]),t._v("，"),s("code",[t._v("loaders")]),t._v("，"),s("code",[t._v("plugins")]),t._v(" 这些信息，这个对象在 Webpack 启动时候被实例化，它是全局唯一的，可以简单地把它理解为 Webpack 实例；")]),t._v(" "),s("li",[t._v("Compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。当 Webpack 以开发模式运行时，每当检测到一个文件变化，一次新的 Compilation 将被创建。Compilation 对象也提供了很多事件回调供插件做扩展。通过 Compilation 也能读取到 Compiler 对象。")])]),t._v(" "),s("p",[t._v("Compiler 和 Compilation 的区别在于：Compiler 代表了整个 Webpack 从启动到关闭的生命周期，而 Compilation 只是代表了一次新的编译。")]),t._v(" "),s("h3",{attrs:{id:"事件流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事件流"}},[t._v("#")]),t._v(" 事件流")]),t._v(" "),s("p",[t._v("Webpack 就像一条生产线，要经过一系列处理流程后才能将源文件转换成输出结果。 这条生产线上的每个处理流程的职责都是单一的，多个流程之间有存在依赖关系，只有完成当前处理后才能交给下一个流程去处理。 插件就像是一个插入到生产线中的一个功能，在特定的时机对生产线上的资源做处理。")]),t._v(" "),s("p",[t._v("Webpack 通过 Tapable 来组织这条复杂的生产线。 Webpack 在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条生产线中，去改变生产线的运作。 Webpack 的事件流机制保证了插件的有序性，使得整个系统扩展性很好。")]),t._v(" "),s("p",[t._v("Webpack 的事件流机制应用了观察者模式，和 Node.js 中的 EventEmitter 非常相似。Compiler 和 Compilation 都继承自 Tapable，可以直接在 Compiler 和 Compilation 对象上广播和监听事件，方法如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("/**\n* 广播出事件\n* event-name 为事件名称，注意不要和现有的事件重名\n* params 为附带的参数\n*/\ncompiler.apply('event-name',params);\n\n/**\n* 监听名称为 event-name 的事件，当 event-name 事件发生时，函数就会被执行。\n* 同时函数中的 params 参数为广播事件时附带的参数。\n*/\ncompiler.plugin('event-name',function(params) {\n\n});\n")])])]),s("p",[t._v("同理，"),s("code",[t._v("compilation.apply")]),t._v(" 和 "),s("code",[t._v("compilation.plugin")]),t._v(" 使用方法和上面一致。")]),t._v(" "),s("p",[t._v("在开发插件时，你可能会不知道该如何下手，因为你不知道该监听哪个事件才能完成任务。")]),t._v(" "),s("p",[t._v("在开发插件时，还需要注意以下两点：")]),t._v(" "),s("ul",[s("li",[t._v("只要能拿到 Compiler 或 Compilation 对象，就能广播出新的事件，所以在新开发的插件中也能广播出事件，给其它插件监听使用。")]),t._v(" "),s("li",[t._v("传给每个插件的 Compiler 和 Compilation 对象都是同一个引用。也就是说在一个插件中修改了 Compiler 或 Compilation 对象上的属性，会影响到后面的插件。")]),t._v(" "),s("li",[t._v("有些事件是异步的，这些异步的事件会附带两个参数，第二个参数为回调函数，在插件处理完任务时需要调用回调函数通知 Webpack，才会进入下一处理流程。例如：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v(" compiler.plugin('emit',function(compilation, callback) {\n    // 支持处理逻辑\n\n    // 处理完毕后执行 callback 以通知 Webpack \n    // 如果不执行 callback，运行流程将会一直卡在这不往下执行 \n    callback();\n  });\n")])])]),s("h3",{attrs:{id:"常用-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用-api"}},[t._v("#")]),t._v(" 常用 API")]),t._v(" "),s("p",[t._v("插件可以用来修改输出文件、增加输出文件、甚至可以提升 Webpack 性能、等等，总之插件通过调用 Webpack 提供的 API 能完成很多事情。 由于 Webpack 提供的 API 非常多，有很多 API 很少用的上，又加上篇幅有限，下面来介绍一些常用的 API。")]),t._v(" "),s("h3",{attrs:{id:"读取输出资源、代码块、模块及其依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读取输出资源、代码块、模块及其依赖"}},[t._v("#")]),t._v(" 读取输出资源、代码块、模块及其依赖")]),t._v(" "),s("p",[t._v("有些插件可能需要读取 Webpack 的处理结果，例如输出资源、代码块、模块及其依赖，以便做下一步处理。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("emit")]),t._v(" 事件发生时，代表源文件的转换和组装已经完成，在这里可以读取到最终将输出的资源、代码块、模块及其依赖，并且可以修改输出资源的内容。 插件代码如下：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Plugin")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compiler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    compiler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emit'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compilation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compilation.chunks 存放所有代码块，是一个数组")]),t._v("\n      compilation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chunks"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("chunk")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// chunk 代表一个代码块")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码块由多个模块组成，通过 chunk.forEachModule 能读取组成代码块的每个模块")]),t._v("\n        chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEachModule")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("module")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module 代表一个模块")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// module.fileDependencies 存放当前模块的所有依赖的文件路径，是一个数组")]),t._v("\n          module"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fileDependencies"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("filepath")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Webpack 会根据 Chunk 去生成输出的文件资源，每个 Chunk 都对应一个及其以上的输出文件")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 例如在 Chunk 中包含了 CSS 模块并且使用了 ExtractTextPlugin 时，")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该 Chunk 就会生成 .js 和 .css 两个文件")]),t._v("\n        chunk"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("files"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("filename")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compilation.assets 存放当前所有即将输出的资源")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用一个输出资源的 source() 方法能获取到输出资源的内容")]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" source "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" compilation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assets"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("source")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个异步事件，要记得调用 callback 通知 Webpack 本次事件监听处理结束。")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果忘记了调用 callback，Webpack 将一直卡在这里而不会往后执行。")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"监听文件变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#监听文件变化"}},[t._v("#")]),t._v(" 监听文件变化")]),t._v(" "),s("p",[t._v("Webpack 会从配置的入口模块出发，依次找出所有的依赖模块，当入口模块或者其依赖的模块发生变化时， 就会触发一次新的 Compilation。")]),t._v(" "),s("p",[t._v("在开发插件时经常需要知道是哪个文件发生变化导致了新的 Compilation，为此可以使用如下代码：")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当依赖的文件发生变化时会触发 watch-run 事件")]),t._v("\ncompiler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("plugin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'watch-run'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("watching"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取发生变化的文件列表")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" changedFiles "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" watching"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("compiler"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watchFileSystem"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watcher"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mtimes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// changedFiles 格式为键值对，键为发生变化的文件路径。")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("changedFiles"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filePath"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// filePath 对应的文件发生了变化")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("默认情况下 Webpack 只会监视入口和其依赖的模块是否发生变化，在有些情况下项目可能需要引入新的文件，例如引入一个 HTML 文件。 由于 JavaScript 文件不会去导入 HTML 文件，Webpack 就不会监听 HTML 文件的变化，编辑 HTML 文件时就不会重新触发新的 Compilation。 为了监听 HTML 文件的变化，我们需要把 HTML 文件加入到依赖列表中，为此可以使用如下代码：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("compiler.plugin('after-compile', (compilation, callback) => {\n  // 把 HTML 文件添加到文件依赖列表，好让 Webpack 去监听 HTML 模块文件，在 HTML 模版文件发生变化时重新启动一次编译\n    compilation.fileDependencies.push(filePath);\n    callback();\n});\n")])])]),s("h3",{attrs:{id:"修改输出资源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改输出资源"}},[t._v("#")]),t._v(" 修改输出资源")]),t._v(" "),s("p",[t._v("有些场景下插件需要修改、增加、删除输出的资源，要做到这点需要监听 "),s("code",[t._v("emit")]),t._v(" 事件，因为发生 "),s("code",[t._v("emit")]),t._v(" 事件时所有模块的转换和代码块对应的文件已经生成好， 需要输出的资源即将输出，因此 "),s("code",[t._v("emit")]),t._v(" 事件是修改 Webpack 输出资源的最后时机。")]),t._v(" "),s("p",[t._v("所有需要输出的资源会存放在 "),s("code",[t._v("compilation.assets")]),t._v(" 中，"),s("code",[t._v("compilation.assets")]),t._v(" 是一个键值对，键为需要输出的文件名称，值为文件对应的内容。")]),t._v(" "),s("p",[t._v("设置 "),s("code",[t._v("compilation.assets")]),t._v(" 的代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("compiler.plugin('emit', (compilation, callback) => {\n  // 设置名称为 fileName 的输出资源\n  compilation.assets[fileName] = {\n    // 返回文件内容\n    source: () => {\n      // fileContent 既可以是代表文本文件的字符串，也可以是代表二进制文件的 Buffer\n      return fileContent;\n      },\n    // 返回文件大小\n      size: () => {\n      return Buffer.byteLength(fileContent, 'utf8');\n    }\n  };\n  callback();\n});\n")])])]),s("p",[t._v("读取 "),s("code",[t._v("compilation.assets")]),t._v(" 的代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("compiler.plugin('emit', (compilation, callback) => {\n  // 读取名称为 fileName 的输出资源\n  const asset = compilation.assets[fileName];\n  // 获取输出资源的内容\n  asset.source();\n  // 获取输出资源的文件大小\n  asset.size();\n  callback();\n});\n")])])]),s("h3",{attrs:{id:"判断-webpack-使用了哪些插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断-webpack-使用了哪些插件"}},[t._v("#")]),t._v(" 判断 Webpack 使用了哪些插件")]),t._v(" "),s("p",[t._v("在开发一个插件时可能需要根据当前配置是否使用了其它某个插件而做下一步决定，因此需要读取 Webpack 当前的插件配置情况。 以判断当前是否使用了 ExtractTextPlugin 为例，可以使用如下代码：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// 判断当前配置使用使用了 ExtractTextPlugin，\n// compiler 参数即为 Webpack 在 apply(compiler) 中传入的参数\nfunction hasExtractTextPlugin(compiler) {\n  // 当前配置所有使用的插件列表\n  const plugins = compiler.options.plugins;\n  // 去 plugins 中寻找有没有 ExtractTextPlugin 的实例\n  return plugins.find(plugin=>plugin.__proto__.constructor === ExtractTextPlugin) != null;\n}\n")])])]),s("h3",{attrs:{id:"实战-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战-2"}},[t._v("#")]),t._v(" 实战")]),t._v(" "),s("p",[t._v("下面我们举一个实际的例子，带你一步步去实现一个插件。")]),t._v(" "),s("p",[t._v("该插件的名称取名叫 EndWebpackPlugin，作用是在 Webpack 即将退出时再附加一些额外的操作，例如在 Webpack 成功编译和输出了文件后执行发布操作把输出的文件上传到服务器。 同时该插件还能区分 Webpack 构建是否执行成功。使用该插件时方法如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("module.exports = {\n  plugins:[\n    // 在初始化 EndWebpackPlugin 时传入了两个参数，分别是在成功时的回调函数和失败时的回调函数；\n    new EndWebpackPlugin(() => {\n      // Webpack 构建成功，并且文件输出了后会执行到这里，在这里可以做发布文件操作\n    }, (err) => {\n      // Webpack 构建失败，err 是导致错误的原因\n      console.error(err);        \n    })\n  ]\n}\n")])])]),s("p",[t._v("要实现该插件，需要借助两个事件：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("done")]),t._v("：在成功构建并且输出了文件后，Webpack 即将退出时发生；")]),t._v(" "),s("li",[s("code",[t._v("failed")]),t._v("：在构建出现异常导致构建失败，Webpack 即将退出时发生；")])]),t._v(" "),s("p",[t._v("实现该插件非常简单，完整代码如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("class EndWebpackPlugin {\n\n  constructor(doneCallback, failCallback) {\n    // 存下在构造函数中传入的回调函数\n    this.doneCallback = doneCallback;\n    this.failCallback = failCallback;\n  }\n\n  apply(compiler) {\n    compiler.plugin('done', (stats) => {\n        // 在 done 事件中回调 doneCallback\n        this.doneCallback(stats);\n    });\n    compiler.plugin('failed', (err) => {\n        // 在 failed 事件中回调 failCallback\n        this.failCallback(err);\n    });\n  }\n}\n// 导出插件 \nmodule.exports = EndWebpackPlugin;\n")])])]),s("p",[t._v("从开发这个插件可以看出，找到合适的事件点去完成功能在开发插件时显得尤为重要。 在 "),s("strong",[t._v("工作原理概括")]),t._v(" 中详细介绍过 Webpack 在运行过程中广播出常用事件，你可以从中找到你需要的事件。")]),t._v(" "),s("h2",{attrs:{id:"常用-loaders"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用-loaders"}},[t._v("#")]),t._v(" 常用 Loaders")]),t._v(" "),s("h3",{attrs:{id:"加载文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载文件"}},[t._v("#")]),t._v(" 加载文件")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/raw-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("raw-loader"),s("OutboundLink")],1),t._v("：把文本文件的内容加载到代码中去。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/file-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("file-loader"),s("OutboundLink")],1),t._v("：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/url-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("url-loader"),s("OutboundLink")],1),t._v("：和 "),s("code",[t._v("file-loader")]),t._v(" 类似，但是能在文件很小的情况下以 "),s("code",[t._v("base64")]),t._v(" 的方式把文件内容注入到代码中去。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/source-map-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("source-map-loader"),s("OutboundLink")],1),t._v("：加载额外的 Source Map 文件，以方便断点调试。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/svg-inline-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("svg-inline-loader"),s("OutboundLink")],1),t._v("：把压缩后的 SVG 内容注入到代码中。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/svg-inline-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("node-loader"),s("OutboundLink")],1),t._v("：加载 Node.js 原生模块 .node 文件。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/tcoopman/image-webpack-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("image-loader"),s("OutboundLink")],1),t._v("：加载并且压缩图片文件。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/json-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("json-loader"),s("OutboundLink")],1),t._v("：加载 JSON 文件。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/okonet/yaml-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("yaml-loader"),s("OutboundLink")],1),t._v("：加载 YAML 文件。")])]),t._v(" "),s("h3",{attrs:{id:"编译模版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译模版"}},[t._v("#")]),t._v(" 编译模版")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/pugjs/pug-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("pug-loader"),s("OutboundLink")],1),t._v("：把 Pug 模版转换成 JavaScript 函数返回。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/pcardune/handlebars-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("handlebars-loader"),s("OutboundLink")],1),t._v("：把 Handlebars 模版编译成函数返回。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/okonet/ejs-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("ejs-loader"),s("OutboundLink")],1),t._v("：把 EJS 模版编译成函数返回。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/AlexanderPavlenko/haml-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("haml-loader"),s("OutboundLink")],1),t._v("：把 HAML 代码转换成 HTML。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/peerigon/markdown-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("markdown-loader"),s("OutboundLink")],1),t._v("：把 Markdown 文件转换成 HTML。")])]),t._v(" "),s("h3",{attrs:{id:"转换脚本语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换脚本语言"}},[t._v("#")]),t._v(" 转换脚本语言")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/babel/babel-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("babel-loader"),s("OutboundLink")],1),t._v("：把 ES6 转换成 ES5。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/TypeStrong/ts-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("ts-loader"),s("OutboundLink")],1),t._v("：把 TypeScript 转换成 JavaScript。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/s-panferov/awesome-typescript-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("awesome-typescript-loader"),s("OutboundLink")],1),t._v("：把 TypeScript 转换成 JavaScript，性能要比 "),s("code",[t._v("ts-loader")]),t._v(" 好。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/coffee-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("coffee-loader"),s("OutboundLink")],1),t._v("：把 CoffeeScript 转换成 JavaScript。")])]),t._v(" "),s("h3",{attrs:{id:"转换样式文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换样式文件"}},[t._v("#")]),t._v(" 转换样式文件")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/css-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("css-loader"),s("OutboundLink")],1),t._v("：加载 CSS，支持模块化、压缩、文件导入等特性。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/style-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("style-loader"),s("OutboundLink")],1),t._v("：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/sass-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("sass-loader"),s("OutboundLink")],1),t._v("：把 SCSS/SASS 代码转换成 CSS。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/postcss/postcss-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("postcss-loader"),s("OutboundLink")],1),t._v("：扩展 CSS 语法，使用下一代 CSS。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/less-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("less-loader"),s("OutboundLink")],1),t._v("：把 Less 代码转换成 CSS 代码。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/shama/stylus-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("stylus-loader"),s("OutboundLink")],1),t._v("：把 Stylus 代码转换成 CSS 代码。")])]),t._v(" "),s("h3",{attrs:{id:"检查代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检查代码"}},[t._v("#")]),t._v(" 检查代码")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/MoOx/eslint-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint-loader"),s("OutboundLink")],1),t._v("：通过 ESLint 检查 JavaScript 代码。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/wbuchwalter/tslint-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("tslint-loader"),s("OutboundLink")],1),t._v("：通过 TSLint 检查 TypeScript 代码。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/mocha-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("mocha-loader"),s("OutboundLink")],1),t._v("：加载 Mocha 测试用例代码。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/coverjs-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("coverjs-loader"),s("OutboundLink")],1),t._v("：计算测试覆盖率。")])]),t._v(" "),s("h3",{attrs:{id:"其它"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/vuejs/vue-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue-loader"),s("OutboundLink")],1),t._v("：加载 Vue.js 单文件组件。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/i18n-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("i18n-loader"),s("OutboundLink")],1),t._v("：加载多语言版本，支持国际化。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/i18n-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("ignore-loader"),s("OutboundLink")],1),t._v("：忽略掉部分文件。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/gwuhaolin/ui-component-loader",target:"_blank",rel:"noopener noreferrer"}},[t._v("ui-component-loader"),s("OutboundLink")],1),t._v("：按需加载 UI 组件库，例如在使用 antd UI 组件库时，不会因为只用到了 Button 组件而打包进所有的组件。")])]),t._v(" "),s("h2",{attrs:{id:"常用-plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用-plugins"}},[t._v("#")]),t._v(" 常用 Plugins")]),t._v(" "),s("h3",{attrs:{id:"用于修改行为"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用于修改行为"}},[t._v("#")]),t._v(" 用于修改行为")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://webpack.js.org/plugins/define-plugin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("define-plugin"),s("OutboundLink")],1),t._v("：定义环境变量。")]),t._v(" "),s("li",[s("a",{attrs:{href:"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-7%E5%8C%BA%E5%88%86%E7%8E%AF%E5%A2%83.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("context-replacement-plugin"),s("OutboundLink")],1),t._v("：修改 require 语句在寻找文件时的默认行为。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://webpack.js.org/plugins/ignore-plugin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ignore-plugin"),s("OutboundLink")],1),t._v("：用于忽略部分文件。")])]),t._v(" "),s("h3",{attrs:{id:"用于优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用于优化"}},[t._v("#")]),t._v(" 用于优化")]),t._v(" "),s("ul",[s("li",[s("p",[s("a",{attrs:{href:"https://webpack.js.org/plugins/commons-chunk-plugin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("commons-chunk-plugin"),s("OutboundLink")],1),t._v("：提取公共代码。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://github.com/webpack-contrib/extract-text-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("extract-text-webpack-plugin"),s("OutboundLink")],1),t._v("：提取 JavaScript 中的 CSS 代码到单独的文件中。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"http://webpack.wuhaolin.cn/1%E5%85%A5%E9%97%A8/1-5%E4%BD%BF%E7%94%A8Plugin.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("prepack-webpack-plugin"),s("OutboundLink")],1),t._v("：通过 Facebook 的 Prepack 优化输出的 JavaScript 代码性能。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-13%E4%BD%BF%E7%94%A8Prepack.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("uglifyjs-webpack-plugin"),s("OutboundLink")],1),t._v("：通过 UglifyES 压缩 ES6 代码。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://github.com/gdborton/webpack-parallel-uglify-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack-parallel-uglify-plugin"),s("OutboundLink")],1),t._v("：多进程执行 UglifyJS 代码压缩，提升构建速度。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://www.npmjs.com/package/imagemin-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("imagemin-webpack-plugin"),s("OutboundLink")],1),t._v("：压缩图片文件。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://www.npmjs.com/package/webpack-spritesmith",target:"_blank",rel:"noopener noreferrer"}},[t._v("webpack-spritesmith"),s("OutboundLink")],1),t._v("：用插件制作雪碧图。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://webpack.js.org/plugins/module-concatenation-plugin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ModuleConcatenationPlugin"),s("OutboundLink")],1),t._v("：开启 Webpack Scope Hoisting 功能。")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://webpack.js.org/plugins/dll-plugin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("dll-plugin"),s("OutboundLink")],1),t._v("：借鉴 DDL 的思想大幅度提升构建速度。")])])]),t._v(" "),s("h3",{attrs:{id:"其它-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其它-2"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/oliviertassinari/serviceworker-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("serviceworker-webpack-plugin"),s("OutboundLink")],1),t._v("：给网页应用增加离线缓存功能。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/JaKXz/stylelint-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("stylelint-webpack-plugin"),s("OutboundLink")],1),t._v("：集成 "),s("code",[t._v("stylelint")]),t._v(" 到项目中。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/webpack-contrib/i18n-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("i18n-webpack-plugin"),s("OutboundLink")],1),t._v("：给你的网页支持国际化。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://webpack.js.org/plugins/provide-plugin/",target:"_blank",rel:"noopener noreferrer"}},[t._v("provide-plugin"),s("OutboundLink")],1),t._v("：从环境中提供的全局变量中加载模块，而不用导入对应的文件。")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/gwuhaolin/web-webpack-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("web-webpack-plugin"),s("OutboundLink")],1),t._v("：方便的为单页应用输出 HTML，比 html-webpack-plugin 好用。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);
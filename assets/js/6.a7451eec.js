(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{208:function(t,r,s){t.exports=s.p+"assets/img/compile.d0ca8a67.png"},209:function(t,r,s){t.exports=s.p+"assets/img/jit.70d71006.png"},255:function(t,r,s){"use strict";s.r(r);var _=s(28),v=Object(_.a)({},(function(){var t=this,r=t.$createElement,_=t._self._c||r;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h4",{attrs:{id:"v8-工作原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#v8-工作原理"}},[t._v("#")]),t._v(" V8 工作原理")]),t._v(" "),_("p",[_("strong",[t._v("编译器(Compiler)、解释器(Interpreter)、抽象语法树(AST)、字节码 (Bytecode)、即时编译器(JIT)")])]),t._v(" "),_("h4",{attrs:{id:"编译器和解释器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#编译器和解释器"}},[t._v("#")]),t._v(" "),_("strong",[t._v("编译器和解释器")])]),t._v(" "),_("p",[_("strong",[t._v("编译型语言在程序执行之前，需要经过编译器的编译过程，并且编译之后会直接保留机器能 读懂的二进制文件，这样每次运行程序时，都可以直接运行该二进制文件，而不需要再次重 新编译了")]),t._v("。比如 C/C++、GO 等都是编译型语言。")]),t._v(" "),_("p",[_("strong",[t._v("而由解释型语言编写的程序，在每次运行时都需要通过解释器对程序进行动态解释和执行")]),t._v("。 比如 Python、JavaScript 等都属于解释型语言")]),t._v(" "),_("p",[_("img",{attrs:{src:s(208),alt:"process"}})]),t._v(" "),_("ol",[_("li",[t._v("在编译型语言的编译过程中，编译器首先会依次对源代码进行词法分析、语法分析，生 成抽象语法树(AST)，然后是优化代码，最后再生成处理器能够理解的机器码。如果 编译成功，将会生成一个可执行的文件。但如果编译过程发生了语法或者其他的错误， 那么编译器就会抛出异常，最后的二进制文件也不会生成成功。")]),t._v(" "),_("li",[t._v("在解释型语言的解释过程中，同样解释器也会对源代码进行词法分析、语法分析，并生 成抽象语法树(AST)，不过它会再基于抽象语法树生成字节码，最后再根据字节码来 执行程序、输出结果。")])]),t._v(" "),_("h4",{attrs:{id:"_1-生成抽象语法树-ast-和执行上下文"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-生成抽象语法树-ast-和执行上下文"}},[t._v("#")]),t._v(" "),_("strong",[t._v("1.")]),t._v(" 生成抽象语法树(AST)和执行上下文")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("如何生成抽象语法树")])]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("第一阶段是分词(tokenize)，又称为词法分析")])]),t._v(" "),_("blockquote",[_("p",[t._v("其作用是将一行行的源码拆解成一个个 token。所谓"),_("strong",[t._v("token")]),t._v("，指的是语法上不可能再分的、最小的单个字符或字符串。")])])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("第二阶段是解析(parse)，又称为语法分析")])]),t._v(" "),_("blockquote",[_("p",[t._v("将上一步生成的 token 数据，根 据语法规则转为 AST。如果源码符合语法规则，这一步就会顺利完成。但如果源码存在语 法错误，这一步就会终止，并抛出一个“语法错误”。")])])])])])]),t._v(" "),_("h4",{attrs:{id:"_2-生成字节码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-生成字节码"}},[t._v("#")]),t._v(" "),_("strong",[t._v("2.")]),t._v(" 生成字节码")]),t._v(" "),_("p",[t._v("通过解释器 Ignition，根据 AST生成字节码，并解释执行字节码。")]),t._v(" "),_("p",[_("strong",[t._v("什么是字节码呢?")])]),t._v(" "),_("blockquote",[_("p",[t._v("字节码就是介于 AST 和机器码之间的一种代码。但是与特定类型的机器码无关，字节码需 要通过解释器将其转换为机器码后才能执行")])]),t._v(" "),_("h4",{attrs:{id:"_3-执行代码"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-执行代码"}},[t._v("#")]),t._v(" "),_("strong",[t._v("3.")]),t._v(" "),_("strong",[t._v("执行代码")])]),t._v(" "),_("blockquote",[_("p",[t._v("如果有一段第一次执行的字节码，解释器 Ignition 会逐条解释执行。在执行字节码 的过程中，如果发现有热点代码(HotSpot)，比如一段代码被重复执行多次，这种就称 为"),_("strong",[t._v("热点代码")]),t._v("，那么后台的编译器 TurboFan 就会把该段热点的字节码编译为高效的机器 码，然后当再次执行这段被优化的代码时，只需要执行编译后的机器码就可以了，这样就大 大提升了代码的执行效率。")])]),t._v(" "),_("p",[t._v("字节码配合解释器和编译器是最近一段时间很火的技术，比如 Java 和 Python 的虚拟 机也都是基于这种技术实现的，我们把这种技术称为"),_("strong",[t._v("即时编译(JIT)")])]),t._v(" "),_("p",[_("img",{attrs:{src:s(209),alt:"process"}})]),t._v(" "),_("p",[_("strong",[t._v("Rerfence:")])]),t._v(" "),_("p",[_("a",{attrs:{href:"https://time.geekbang.org/column/intro/100033601",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器工作原理与实践"),_("OutboundLink")],1)])])}),[],!1,null,null,null);r.default=v.exports}}]);
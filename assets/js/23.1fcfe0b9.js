(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{239:function(t,a,s){"use strict";s.r(a);var n=s(28),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("h3",{attrs:{id:"基础类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础类型"}},[t._v("#")]),t._v(" 基础类型")]),t._v(" "),s("ol",[s("li",[t._v("数值（number）：整数和小数（比如 1 和 3.14）")]),t._v(" "),s("li",[t._v("字符串（string）：文本（比如 Hello World）。")]),t._v(" "),s("li",[t._v("布尔值（boolean）：表示真伪的两个特殊值，即 true（真）和 false（假）")]),t._v(" "),s("li",[t._v("undefined：表示“未定义”或不存在，即由于目前没有定义，所以此处暂时没有任何值")]),t._v(" "),s("li",[t._v("null：表示空值，即此处的值为空。")]),t._v(" "),s("li",[t._v("对象（object）：各种值组成的集合。")]),t._v(" "),s("li",[t._v("symbol")])]),t._v(" "),s("h4",{attrs:{id:"检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检测"}},[t._v("#")]),t._v(" 检测")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("typeof")]),t._v("运算符")]),t._v(" "),s("li",[s("code",[t._v("instanceof")]),t._v("运算符(用来比较一个对象是否为某个构造函数的实例)")]),t._v(" "),s("li",[s("code",[t._v("Object.prototype.toString")]),t._v("方法")])]),t._v(" "),s("h3",{attrs:{id:"null-与-undefined"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-与-undefined"}},[t._v("#")]),t._v(" null 与 undefined")]),t._v(" "),s("blockquote",[s("p",[t._v("JavaScript 的设计者 Brendan Eich，觉得这样做还不够。首先，第一版的 JavaScript 里面，null 就像在 Java 里一样，被当成一个对象，Brendan Eich 觉得表示“无”的值最好不是对象。其次，那时的 JavaScript 不包括错误处理机制，Brendan Eich 觉得，如果 null 自动转为 0，很不容易发现错误。\n因此，他又设计了一个 undefined。区别是这样的：null 是一个表示“空”的对象，转为数值时为 0；undefined 是一个表示”此处无定义”的原始值，转为数值时为 NaN。")])]),t._v(" "),s("h3",{attrs:{id:"布尔值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[t._v("#")]),t._v(" 布尔值")]),t._v(" "),s("p",[t._v("转换规则是除了下面六个值被转为"),s("code",[t._v("false")]),t._v("，其他值都视为"),s("code",[t._v("true")]),t._v("。")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("undefined")])]),t._v(" "),s("li",[s("code",[t._v("null")])]),t._v(" "),s("li",[s("code",[t._v("false")])]),t._v(" "),s("li",[s("code",[t._v("0")])]),t._v(" "),s("li",[s("code",[t._v("NaN")])]),t._v(" "),s("li",[s("code",[t._v('""')]),t._v("或"),s("code",[t._v("''")]),t._v("（空字符串）")])]),t._v(" "),s("h2",{attrs:{id:"数据类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[t._v("#")]),t._v(" 数据类型转换")]),t._v(" "),s("h3",{attrs:{id:"强制转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强制转换"}},[t._v("#")]),t._v(" 强制转换")]),t._v(" "),s("p",[s("strong",[t._v("Number")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("Number")]),t._v("方法的参数是对象时，将返回"),s("code",[t._v("NaN")]),t._v("，除非是包含单个数值的数组。")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])])]),s("p",[s("strong",[t._v("Boolean")])]),t._v(" "),s("p",[t._v("如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与"),s("code",[t._v("Boolean")]),t._v("函数的作用相同。这是一种常用的类型转换的写法。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("x\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等同于")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("String")])]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "null"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Object]"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1,2,3"')]),t._v("\n")])])]),s("h2",{attrs:{id:"错误机制处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#错误机制处理"}},[t._v("#")]),t._v(" 错误机制处理")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("SyntaxError")]),t._v("对象是解析代码时发生的语法错误")]),t._v(" "),s("li",[s("code",[t._v("ReferenceError")]),t._v("对象是引用一个不存在的变量时发生的错误。")]),t._v(" "),s("li",[s("code",[t._v("RangeError")]),t._v("对象是一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是"),s("code",[t._v("Number")]),t._v("对象的方法参数超出范围，以及函数堆栈超过最大值。")]),t._v(" "),s("li",[s("code",[t._v("TypeError")]),t._v("对象是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用"),s("code",[t._v("new")]),t._v("命令，就会抛出这种错误，因为"),s("code",[t._v("new")]),t._v("命令的参数应该是一个构造函数。")]),t._v(" "),s("li",[s("code",[t._v("URIError")]),t._v("对象是 URI 相关函数的参数不正确时抛出的错误，主要涉及"),s("code",[t._v("encodeURI()")]),t._v("、"),s("code",[t._v("decodeURI()")]),t._v("、"),s("code",[t._v("encodeURIComponent()")]),t._v("、"),s("code",[t._v("decodeURIComponent()")]),t._v("、"),s("code",[t._v("escape()")]),t._v("和"),s("code",[t._v("unescape()")]),t._v("这六个函数。")]),t._v(" "),s("li",[s("code",[t._v("eval")]),t._v("函数没有被正确执行时，会抛出"),s("code",[t._v("EvalError")]),t._v("错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。")])]),t._v(" "),s("h3",{attrs:{id:"表达式还是语句？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#表达式还是语句？"}},[t._v("#")]),t._v(" 表达式还是语句？")]),t._v(" "),s("p",[t._v("对象采用大括号表示，这导致了一个问题：如果行首是一个大括号，它到底是表达式还是语句？")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// call的实现")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" foo"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{foo: 123}'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("eval")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'({foo: 123})'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {foo: 123}")]),t._v("\n")])])]),s("p",[t._v("JavaScript 引擎读到上面这行代码，会发现可能有两种含义。第一种可能是，这是一个表达式，表示一个包含"),s("code",[t._v("foo")]),t._v("属性的对象；第二种可能是，这是一个语句，表示一个代码区块，里面有一个标签"),s("code",[t._v("foo")]),t._v("，指向表达式"),s("code",[t._v("123")]),t._v("。为了避免这种歧义，V8 引擎规定，如果行首是大括号，一律解释为对象。不过，为了避免歧义，最好还是在大括号前加上圆括号。")]),t._v(" "),s("p",[t._v("这种差异在"),s("code",[t._v("eval")]),t._v("语句（作用是对字符串求值）中反映得最明显。如果没有圆括号，"),s("code",[t._v("eval")]),t._v("将其理解为一个代码块；加上圆括号以后，就理解成一个对象")]),t._v(" "),s("h4",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=e.exports}}]);